class YZ_CLAS_MDG_MM_DATA_PROCESS definition
  public
  inheriting from YZ_CLAS_MDG_MM_DATA_PROCESS_EX
  create protected .

public section.

  interfaces YZ_INTF_MDG_MM_DATA_TYPES .
  interfaces IF_MDG_BS_MAT_GEN_C .
  interfaces YZ_INTF_MDG_DATA_PROCESS .
  interfaces YZ_INTF_MDG_MM_CONST .

  aliases GC_ACTION_DEL
    for IF_MDG_BS_MAT_GEN_C~GC_ACTION_DEL .
  aliases GC_ACTION_INS
    for IF_MDG_BS_MAT_GEN_C~GC_ACTION_INS .
  aliases GC_ACTION_UPD
    for IF_MDG_BS_MAT_GEN_C~GC_ACTION_UPD .
  aliases GC_ATTR_ACTIV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ACTIV .
  aliases GC_ATTR_ADATUMKAL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ADATUMKAL .
  aliases GC_ATTR_AFR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_AFR .
  aliases GC_ATTR_ALAND
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ALAND .
  aliases GC_ATTR_ALPHA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ALPHA .
  aliases GC_ATTR_ANZPR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ANZPR .
  aliases GC_ATTR_APA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_APA .
  aliases GC_ATTR_APP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_APP .
  aliases GC_ATTR_ART
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ART .
  aliases GC_ATTR_AUTRU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_AUTRU .
  aliases GC_ATTR_AVE
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_AVE .
  aliases GC_ATTR_AWSLS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_AWSLS .
  aliases GC_ATTR_BDATUMKAL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BDATUMKAL .
  aliases GC_ATTR_BEGRU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BEGRU .
  aliases GC_ATTR_BERID
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BERID .
  aliases GC_ATTR_BETA1
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BETA1 .
  aliases GC_ATTR_BREIT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BREIT .
  aliases GC_ATTR_BREITMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BREITMARA .
  aliases GC_ATTR_BRGEW
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BRGEW .
  aliases GC_ATTR_BRGEWMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BRGEWMARA .
  aliases GC_ATTR_BWKEY
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BWKEY .
  aliases GC_ATTR_BWTAR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BWTAR .
  aliases GC_ATTR_BWTTY
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_BWTTY .
  aliases GC_ATTR_CADKZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_CADKZ .
  aliases GC_ATTR_CASNR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_CASNR .
  aliases GC_ATTR_CHG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_CHG .
  aliases GC_ATTR_CONF
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_CONF .
  aliases GC_ATTR_CURTP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_CURTP .
  aliases GC_ATTR_DELTA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DELTA .
  aliases GC_ATTR_DISMM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DISMM .
  aliases GC_ATTR_DISPO
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DISPO .
  aliases GC_ATTR_DISPR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DISPR .
  aliases GC_ATTR_DWERK
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DWERK .
  aliases GC_ATTR_DYN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DYN .
  aliases GC_ATTR_DYNREGEL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DYNREGEL .
  aliases GC_ATTR_DZEIT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_DZEIT .
  aliases GC_ATTR_EAN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EAN .
  aliases GC_ATTR_EANTP_MEA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EANTP_MEA .
  aliases GC_ATTR_EAN_MARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EAN_MARA .
  aliases GC_ATTR_EAN_MARM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EAN_MARM .
  aliases GC_ATTR_EIN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EIN .
  aliases GC_ATTR_EXPME
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_EXPME .
  aliases GC_ATTR_FHORI
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FHORI .
  aliases GC_ATTR_FIMON
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FIMON .
  aliases GC_ATTR_FVIDK
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FVIDK .
  aliases GC_ATTR_FZKDAT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZKDAT .
  aliases GC_ATTR_FZKPRS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZKPRS .
  aliases GC_ATTR_FZPLP1
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZPLP1 .
  aliases GC_ATTR_FZPLP2
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZPLP2 .
  aliases GC_ATTR_FZPLP3
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZPLP3 .
  aliases GC_ATTR_FZPLPR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_FZPLPR .
  aliases GC_ATTR_GAMMA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GAMMA .
  aliases GC_ATTR_GEWEI
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GEWEI .
  aliases GC_ATTR_GEWEIMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GEWEIMARA .
  aliases GC_ATTR_GEWEI_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GEWEI_MAT .
  aliases GC_ATTR_GEWMARCPA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GEWMARCPA .
  aliases GC_ATTR_GPNUM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GPNUM .
  aliases GC_ATTR_GTIN_VAR1
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GTIN_VAR1 .
  aliases GC_ATTR_GTIN_VAR2
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_GTIN_VAR2 .
  aliases GC_ATTR_HERKL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HERKL .
  aliases GC_ATTR_HERKL_X
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HERKL_X .
  aliases GC_ATTR_HERKR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HERKR .
  aliases GC_ATTR_HOEHE
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HOEHE .
  aliases GC_ATTR_HOEHEMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HOEHEMARA .
  aliases GC_ATTR_HPEAN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HPEAN .
  aliases GC_ATTR_HPZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HPZ .
  aliases GC_ATTR_HRKFT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_HRKFT .
  aliases GC_ATTR_INSMK
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_INSMK .
  aliases GC_ATTR_KZINI
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_KZINI .
  aliases GC_ATTR_LAENG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LAENG .
  aliases GC_ATTR_LAENGMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LAENGMARA .
  aliases GC_ATTR_LANGU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LANGU .
  aliases GC_ATTR_LANGUCODE
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LANGUCODE .
  aliases GC_ATTR_LFRHY
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LFRHY .
  aliases GC_ATTR_LGNUM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LGNUM .
  aliases GC_ATTR_LGORT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LGORT .
  aliases GC_ATTR_LGTYP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LGTYP .
  aliases GC_ATTR_LHME1
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LHME1 .
  aliases GC_ATTR_LHME2
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LHME2 .
  aliases GC_ATTR_LHME3
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LHME3 .
  aliases GC_ATTR_LOEKZMDMA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LOEKZMDMA .
  aliases GC_ATTR_LOSGR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LOSGR .
  aliases GC_ATTR_LVORMMARD
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LVORMMARD .
  aliases GC_ATTR_LVORMMLGN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LVORMMLGN .
  aliases GC_ATTR_LVORMMLGT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LVORMMLGT .
  aliases GC_ATTR_LVORM_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LVORM_MAT .
  aliases GC_ATTR_LWMKB
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_LWMKB .
  aliases GC_ATTR_MAABC
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MAABC .
  aliases GC_ATTR_MARCFRGTR_STAWN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MARCFRGTR_STAWN .
  aliases GC_ATTR_MARCLVORM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MARCLVORM .
  aliases GC_ATTR_MATERIAL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MATERIAL .
  aliases GC_ATTR_MATFI
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MATFI .
  aliases GC_ATTR_MATKL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MATKL .
  aliases GC_ATTR_MATNR_EXT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MATNR_EXT .
  aliases GC_ATTR_MBEWLVORM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MBEWLVORM .
  aliases GC_ATTR_MBEWMLAST
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MBEWMLAST .
  aliases GC_ATTR_MBRSH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MBRSH .
  aliases GC_ATTR_MDACH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MDACH .
  aliases GC_ATTR_MEABM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MEABM .
  aliases GC_ATTR_MEABMMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MEABMMARA .
  aliases GC_ATTR_MEGRU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MEGRU .
  aliases GC_ATTR_MEINH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MEINH .
  aliases GC_ATTR_MEINS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MEINS .
  aliases GC_ATTR_MER
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MER .
  aliases GC_ATTR_MKALBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MKALBASIC .
  aliases GC_ATTR_MLAST
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MLAST .
  aliases GC_ATTR_MLGTKOBER
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MLGTKOBER .
  aliases GC_ATTR_MLGTLGPLA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MLGTLGPLA .
  aliases GC_ATTR_MODAV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MODAV .
  aliases GC_ATTR_MODAW
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MODAW .
  aliases GC_ATTR_MOGRU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MOGRU .
  aliases GC_ATTR_MOWNR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MOWNR .
  aliases GC_ATTR_MPB
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MPB .
  aliases GC_ATTR_MPDAU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MPDAU .
  aliases GC_ATTR_MRPPP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MRPPP .
  aliases GC_ATTR_MST
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MST .
  aliases GC_ATTR_MSTAE
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MSTAE .
  aliases GC_ATTR_MS_FLAG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MS_FLAG .
  aliases GC_ATTR_MTART
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MTART .
  aliases GC_ATTR_MTPOS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MTPOS .
  aliases GC_ATTR_MTPOSMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MTPOSMARA .
  aliases GC_ATTR_MTVFP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MTVFP .
  aliases GC_ATTR_MVKELVORM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MVKELVORM .
  aliases GC_ATTR_MYPOL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_MYPOL .
  aliases GC_ATTR_NUMTP1
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_NUMTP1 .
  aliases GC_ATTR_NUMTP2
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_NUMTP2 .
  aliases GC_ATTR_PEINH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PEINH .
  aliases GC_ATTR_PEINHMLAC
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PEINHMLAC .
  aliases GC_ATTR_PEINHMLVL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PEINHMLVL .
  aliases GC_ATTR_PERAN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERAN .
  aliases GC_ATTR_PERIN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERIN .
  aliases GC_ATTR_PERIO
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERIO .
  aliases GC_ATTR_PERIV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERIV .
  aliases GC_ATTR_PERKZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERKZ .
  aliases GC_ATTR_PERMRPFC
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PERMRPFC .
  aliases GC_ATTR_PLIFZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PLIFZ .
  aliases GC_ATTR_PPL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PPL .
  aliases GC_ATTR_PRCTR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PRCTR .
  aliases GC_ATTR_PRMOD
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PRMOD .
  aliases GC_ATTR_PVPRS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_PVPRS .
  aliases GC_ATTR_QKZVERF
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_QKZVERF .
  aliases GC_ATTR_QMATV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_QMATV .
  aliases GC_ATTR_QTEUNIT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_QTEUNIT .
  aliases GC_ATTR_RDPRF
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_RDPRF .
  aliases GC_ATTR_RDPRFMVKE
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_RDPRFMVKE .
  aliases GC_ATTR_RWPRO
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_RWPRO .
  aliases GC_ATTR_SATNR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SATNR .
  aliases GC_ATTR_SBDKZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SBDKZ .
  aliases GC_ATTR_SCM_TSID
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SCM_TSID .
  aliases GC_ATTR_SEL_OPTION
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SEL_OPTION .
  aliases GC_ATTR_SEL_SIGN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SEL_SIGN .
  aliases GC_ATTR_SIGGR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SIGGR .
  aliases GC_ATTR_SPEZUEBER
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SPEZUEBER .
  aliases GC_ATTR_SPROZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SPROZ .
  aliases GC_ATTR_SSQSS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_SSQSS .
  aliases GC_ATTR_STAWN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STAWN .
  aliases GC_ATTR_STEUC
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STEUC .
  aliases GC_ATTR_STICHPRVER
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STICHPRVER .
  aliases GC_ATTR_STPRS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STPRS .
  aliases GC_ATTR_STPRSMLVL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STPRSMLVL .
  aliases GC_ATTR_STPRV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_STPRV .
  aliases GC_ATTR_S_CHARACT_VALID_FR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CHARACT_VALID_FR .
  aliases GC_ATTR_S_CHARACT_VALID_TO
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CHARACT_VALID_TO .
  aliases GC_ATTR_S_CLASS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CLASS .
  aliases GC_ATTR_S_CLASS_VALID_FR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CLASS_VALID_FR .
  aliases GC_ATTR_S_CLASS_VALID_TO
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CLASS_VALID_TO .
  aliases GC_ATTR_S_CLINT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_CLINT .
  aliases GC_ATTR_S_HPEAN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_HPEAN .
  aliases GC_ATTR_S_PROPERTY_UUID
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_PROPERTY_UUID .
  aliases GC_ATTR_S_STATU
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_S_STATU .
  aliases GC_ATTR_TAIPURTAX
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TAIPURTAX .
  aliases GC_ATTR_TATYP
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TATYP .
  aliases GC_ATTR_TAXKM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TAXKM .
  aliases GC_ATTR_TLS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TLS .
  aliases GC_ATTR_TXTLG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TXTLG .
  aliases GC_ATTR_TXTMI
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TXTMI .
  aliases GC_ATTR_TXTSH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_TXTSH .
  aliases GC_ATTR_UMREN
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_UMREN .
  aliases GC_ATTR_UMREZ
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_UMREZ .
  aliases GC_ATTR_VERPR
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VERPR .
  aliases GC_ATTR_VKORG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VKORG .
  aliases GC_ATTR_VOLEH
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VOLEH .
  aliases GC_ATTR_VOLEHMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VOLEHMARA .
  aliases GC_ATTR_VOLUM
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VOLUM .
  aliases GC_ATTR_VOLUMMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VOLUMMARA .
  aliases GC_ATTR_VPRSV
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VPRSV .
  aliases GC_ATTR_VPRSVMLVL
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VPRSVMLVL .
  aliases GC_ATTR_VRBDT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VRBDT .
  aliases GC_ATTR_VRBFK
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VRBFK .
  aliases GC_ATTR_VRBMT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VRBMT .
  aliases GC_ATTR_VRBWK
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VRBWK .
  aliases GC_ATTR_VTWEG
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_VTWEG .
  aliases GC_ATTR_WERKS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_WERKS .
  aliases GC_ATTR_XCHPF
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_XCHPF .
  aliases GC_ATTR_XCHPFMARA
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_XCHPFMARA .
  aliases GC_ATTR_ZKPRS
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ZKPRS .
  aliases GC_ATTR_ZPRSDAT
    for IF_MDG_BS_MAT_GEN_C~GC_ATTR_ZPRSDAT .
  aliases GC_BSCDATTXT
    for YZ_INTF_MDG_MM_CONST~GC_BSCDATTXT .
  aliases GC_BUS_ACT_CREATE_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_BUS_ACT_CREATE_MAT .
  aliases GC_BUS_ACT_DELETE_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_BUS_ACT_DELETE_MAT .
  aliases GC_BUS_ACT_PROCESS_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_BUS_ACT_PROCESS_MAT .
  aliases GC_BUS_ACT_PROCESS_MULT_MAT
    for IF_MDG_BS_MAT_GEN_C~GC_BUS_ACT_PROCESS_MULT_MAT .
  aliases GC_CLASSASGN
    for YZ_INTF_MDG_MM_CONST~GC_CLASSASGN .
  aliases GC_CR_STATUS_ACTIVATION_ERROR
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_ACTIVATION_ERROR .
  aliases GC_CR_STATUS_AFTER_REJECTION
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_AFTER_REJECTION .
  aliases GC_CR_STATUS_APPROVE_BUS
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_APPROVE_BUS .
  aliases GC_CR_STATUS_APPROVE_FINALLY
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_APPROVE_FINALLY .
  aliases GC_CR_STATUS_APPRVD_WO_DIST
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_APPRVD_WO_DIST .
  aliases GC_CR_STATUS_BUS_APPROVED
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_BUS_APPROVED .
  aliases GC_CR_STATUS_FINALLY_APPROVED
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_FINALLY_APPROVED .
  aliases GC_CR_STATUS_FINALLY_REJECTED
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_FINALLY_REJECTED .
  aliases GC_CR_STATUS_IN_EVALUATION
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_IN_EVALUATION .
  aliases GC_CR_STATUS_UNKNOWN
    for IF_MDG_BS_MAT_GEN_C~GC_CR_STATUS_UNKNOWN .
  aliases GC_DRADTXT
    for YZ_INTF_MDG_MM_CONST~GC_DRADTXT .
  aliases GC_ENTITY_BSCDATTXT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_BSCDATTXT .
  aliases GC_ENTITY_CLASSASGN
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_CLASSASGN .
  aliases GC_ENTITY_INTCMNT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_INTCMNT .
  aliases GC_ENTITY_MARAPURCH
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARAPURCH .
  aliases GC_ENTITY_MARASALES
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARASALES .
  aliases GC_ENTITY_MARCATP
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCATP .
  aliases GC_ENTITY_MARCBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCBASIC .
  aliases GC_ENTITY_MARCCSTNG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCCSTNG .
  aliases GC_ENTITY_MARCFRCST
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCFRCST .
  aliases GC_ENTITY_MARCFRGTR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCFRGTR .
  aliases GC_ENTITY_MARCFRPAR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCFRPAR .
  aliases GC_ENTITY_MARCMRPFC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCMRPFC .
  aliases GC_ENTITY_MARCMRPLS
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCMRPLS .
  aliases GC_ENTITY_MARCMRPMI
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCMRPMI .
  aliases GC_ENTITY_MARCMRPPP
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCMRPPP .
  aliases GC_ENTITY_MARCMRPSP
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCMRPSP .
  aliases GC_ENTITY_MARCPRT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCPRT .
  aliases GC_ENTITY_MARCQTMNG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCQTMNG .
  aliases GC_ENTITY_MARCSALES
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCSALES .
  aliases GC_ENTITY_MARCWRKSD
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARCWRKSD .
  aliases GC_ENTITY_MARDMRP
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARDMRP .
  aliases GC_ENTITY_MARDSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MARDSTOR .
  aliases GC_ENTITY_MATERIAL
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MATERIAL .
  aliases GC_ENTITY_MBEWACTNG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MBEWACTNG .
  aliases GC_ENTITY_MBEWCSTNG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MBEWCSTNG .
  aliases GC_ENTITY_MBEWMLAC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MBEWMLAC .
  aliases GC_ENTITY_MBEWMLVAL
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MBEWMLVAL .
  aliases GC_ENTITY_MBEWVALUA
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MBEWVALUA .
  aliases GC_ENTITY_MDMABASIC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MDMABASIC .
  aliases GC_ENTITY_MEAN_GTIN
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MEAN_GTIN .
  aliases GC_ENTITY_MKALBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MKALBASIC .
  aliases GC_ENTITY_MLANPURCH
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MLANPURCH .
  aliases GC_ENTITY_MLANSALES
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MLANSALES .
  aliases GC_ENTITY_MLGNSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MLGNSTOR .
  aliases GC_ENTITY_MLGTSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MLGTSTOR .
  aliases GC_ENTITY_MPGDPRODG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MPGDPRODG .
  aliases GC_ENTITY_MRPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MRPTXT .
  aliases GC_ENTITY_MVKEGRPNG
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MVKEGRPNG .
  aliases GC_ENTITY_MVKESALES
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_MVKESALES .
  aliases GC_ENTITY_PURCHTXT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_PURCHTXT .
  aliases GC_ENTITY_QINSPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_QINSPTXT .
  aliases GC_ENTITY_QMATBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_QMATBASIC .
  aliases GC_ENTITY_SALESTXT
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_SALESTXT .
  aliases GC_ENTITY_UNITOFMSR
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_UNITOFMSR .
  aliases GC_ENTITY_VALUATION
    for IF_MDG_BS_MAT_GEN_C~GC_ENTITY_VALUATION .
  aliases GC_FIELDNAME_ALAND
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_ALAND .
  aliases GC_FIELDNAME_ART
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_ART .
  aliases GC_FIELDNAME_BSCDATTXT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_BSCDATTXT .
  aliases GC_FIELDNAME_BWKEY
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_BWKEY .
  aliases GC_FIELDNAME_BWTAR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_BWTAR .
  aliases GC_FIELDNAME_CADPOS
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CADPOS .
  aliases GC_FIELDNAME_CHANGENO
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CHANGENO .
  aliases GC_FIELDNAME_CLASSASGN
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CLASSASGN .
  aliases GC_FIELDNAME_CLASSTYPE
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CLASSTYPE .
  aliases GC_FIELDNAME_CSPLTMKAL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CSPLTMKAL .
  aliases GC_FIELDNAME_CURTP
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_CURTP .
  aliases GC_FIELDNAME_DELFLAG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DELFLAG .
  aliases GC_FIELDNAME_DOKAR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DOKAR .
  aliases GC_FIELDNAME_DOKNR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DOKNR .
  aliases GC_FIELDNAME_DOKOB
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DOKOB .
  aliases GC_FIELDNAME_DOKTL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DOKTL .
  aliases GC_FIELDNAME_DOKVR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_DOKVR .
  aliases GC_FIELDNAME_GEWGR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_GEWGR .
  aliases GC_FIELDNAME_INTCMNT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_INTCMNT .
  aliases GC_FIELDNAME_LANGUCODE
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_LANGUCODE .
  aliases GC_FIELDNAME_LGNUM
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_LGNUM .
  aliases GC_FIELDNAME_LVORM
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_LVORM .
  aliases GC_FIELDNAME_MARCATP
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCATP .
  aliases GC_FIELDNAME_MARCBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCBASIC .
  aliases GC_FIELDNAME_MARCCSTNG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCCSTNG .
  aliases GC_FIELDNAME_MARCFRCST
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCFRCST .
  aliases GC_FIELDNAME_MARCFRGTR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCFRGTR .
  aliases GC_FIELDNAME_MARCFRPAR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCFRPAR .
  aliases GC_FIELDNAME_MARCPRCDR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCPRCDR .
  aliases GC_FIELDNAME_MARCPURCH
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCPURCH .
  aliases GC_FIELDNAME_MARCQTMNG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARCQTMNG .
  aliases GC_FIELDNAME_MARDMRP
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARDMRP .
  aliases GC_FIELDNAME_MARDSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MARDSTOR .
  aliases GC_FIELDNAME_MATERIAL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MATERIAL .
  aliases GC_FIELDNAME_MBEWACTNG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWACTNG .
  aliases GC_FIELDNAME_MBEWCSTNG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWCSTNG .
  aliases GC_FIELDNAME_MBEWGEVAL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWGEVAL .
  aliases GC_FIELDNAME_MBEWMLAC
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWMLAC .
  aliases GC_FIELDNAME_MBEWMLVAL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWMLVAL .
  aliases GC_FIELDNAME_MBEWVALUA
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MBEWVALUA .
  aliases GC_FIELDNAME_MDMABASIC
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MDMABASIC .
  aliases GC_FIELDNAME_MEAN_GTIN
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MEAN_GTIN .
  aliases GC_FIELDNAME_MKALBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MKALBASIC .
  aliases GC_FIELDNAME_MLANPURCH
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MLANPURCH .
  aliases GC_FIELDNAME_MLANSALES
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MLANSALES .
  aliases GC_FIELDNAME_MLGNSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MLGNSTOR .
  aliases GC_FIELDNAME_MLGTSTOR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MLGTSTOR .
  aliases GC_FIELDNAME_MPGDPRODG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MPGDPRODG .
  aliases GC_FIELDNAME_MRPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MRPTXT .
  aliases GC_FIELDNAME_MVKEGRPNG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MVKEGRPNG .
  aliases GC_FIELDNAME_MVKESALES
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_MVKESALES .
  aliases GC_FIELDNAME_NEWESTVER
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_NEWESTVER .
  aliases GC_FIELDNAME_OBJKY
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_OBJKY .
  aliases GC_FIELDNAME_OBZAE
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_OBZAE .
  aliases GC_FIELDNAME_PLNAL_G
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNAL_G .
  aliases GC_FIELDNAME_PLNAL_M
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNAL_M .
  aliases GC_FIELDNAME_PLNAL_P
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNAL_P .
  aliases GC_FIELDNAME_PLNNR_G
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNNR_G .
  aliases GC_FIELDNAME_PLNNR_M
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNNR_M .
  aliases GC_FIELDNAME_PLNNR_P
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNNR_P .
  aliases GC_FIELDNAME_PLNTY_G
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNTY_G .
  aliases GC_FIELDNAME_PLNTY_M
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNTY_M .
  aliases GC_FIELDNAME_PLNTY_P
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PLNTY_P .
  aliases GC_FIELDNAME_PURCHTXT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_PURCHTXT .
  aliases GC_FIELDNAME_QINSPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_QINSPTXT .
  aliases GC_FIELDNAME_QMATBASIC
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_QMATBASIC .
  aliases GC_FIELDNAME_QTEUNIT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_QTEUNIT .
  aliases GC_FIELDNAME_SALESTXT
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_SALESTXT .
  aliases GC_FIELDNAME_STLALMKAL
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_STLALMKAL .
  aliases GC_FIELDNAME_STOFF
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_STOFF .
  aliases GC_FIELDNAME_TATYP
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_TATYP .
  aliases GC_FIELDNAME_TAXKM
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_TAXKM .
  aliases GC_FIELDNAME_TDID
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_TDID .
  aliases GC_FIELDNAME_TXTDRAD
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_TXTDRAD .
  aliases GC_FIELDNAME_UNITOFMSR
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_UNITOFMSR .
  aliases GC_FIELDNAME_VALUATION
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_VALUATION .
  aliases GC_FIELDNAME_VKORG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_VKORG .
  aliases GC_FIELDNAME_VTWEG
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_VTWEG .
  aliases GC_FIELDNAME_WERKS
    for IF_MDG_BS_MAT_GEN_C~GC_FIELDNAME_WERKS .
  aliases GC_FIELD_EDITION
    for IF_MDG_BS_MAT_GEN_C~GC_FIELD_EDITION .
  aliases GC_FPM_SECTION_MAT_SECTION
    for IF_MDG_BS_MAT_GEN_C~GC_FPM_SECTION_MAT_SECTION .
  aliases GC_INTCMNT
    for YZ_INTF_MDG_MM_CONST~GC_INTCMNT .
  aliases GC_MAP_2FC
    for IF_MDG_BS_MAT_GEN_C~GC_MAP_2FC .
  aliases GC_MAP_2PP
    for IF_MDG_BS_MAT_GEN_C~GC_MAP_2PP .
  aliases GC_MAP_2STA
    for IF_MDG_BS_MAT_GEN_C~GC_MAP_2STA .
  aliases GC_MAP_PP_TO_MDG
    for IF_MDG_BS_MAT_GEN_C~GC_MAP_PP_TO_MDG .
  aliases GC_MARAPURCH
    for YZ_INTF_MDG_MM_CONST~GC_MARAPURCH .
  aliases GC_MARAQTMNG
    for YZ_INTF_MDG_MM_CONST~GC_MARAQTMNG .
  aliases GC_MARASALES
    for YZ_INTF_MDG_MM_CONST~GC_MARASALES .
  aliases GC_MARASPM
    for YZ_INTF_MDG_MM_CONST~GC_MARASPM .
  aliases GC_MARASTOR
    for YZ_INTF_MDG_MM_CONST~GC_MARASTOR .
  aliases GC_MARCATP
    for YZ_INTF_MDG_MM_CONST~GC_MARCATP .
  aliases GC_MARCBASIC
    for YZ_INTF_MDG_MM_CONST~GC_MARCBASIC .
  aliases GC_MARCCSTNG
    for YZ_INTF_MDG_MM_CONST~GC_MARCCSTNG .
  aliases GC_MARCFRCST
    for YZ_INTF_MDG_MM_CONST~GC_MARCFRCST .
  aliases GC_MARCFRGTR
    for YZ_INTF_MDG_MM_CONST~GC_MARCFRGTR .
  aliases GC_MARCFRPAR
    for YZ_INTF_MDG_MM_CONST~GC_MARCFRPAR .
  aliases GC_MARCMRPFC
    for YZ_INTF_MDG_MM_CONST~GC_MARCMRPFC .
  aliases GC_MARCMRPLS
    for YZ_INTF_MDG_MM_CONST~GC_MARCMRPLS .
  aliases GC_MARCMRPMI
    for YZ_INTF_MDG_MM_CONST~GC_MARCMRPMI .
  aliases GC_MARCMRPPP
    for YZ_INTF_MDG_MM_CONST~GC_MARCMRPPP .
  aliases GC_MARCMRPSP
    for YZ_INTF_MDG_MM_CONST~GC_MARCMRPSP .
  aliases GC_MARCPRT
    for YZ_INTF_MDG_MM_CONST~GC_MARCPRT .
  aliases GC_MARCPURCH
    for YZ_INTF_MDG_MM_CONST~GC_MARCPURCH .
  aliases GC_MARCQTMNG
    for YZ_INTF_MDG_MM_CONST~GC_MARCQTMNG .
  aliases GC_MARCSALES
    for YZ_INTF_MDG_MM_CONST~GC_MARCSALES .
  aliases GC_MARCSTORE
    for YZ_INTF_MDG_MM_CONST~GC_MARCSTORE .
  aliases GC_MARCWRKSD
    for YZ_INTF_MDG_MM_CONST~GC_MARCWRKSD .
  aliases GC_MARDMRP
    for YZ_INTF_MDG_MM_CONST~GC_MARDMRP .
  aliases GC_MARDSTOR
    for YZ_INTF_MDG_MM_CONST~GC_MARDSTOR .
  aliases GC_MATERIAL
    for YZ_INTF_MDG_MM_CONST~GC_MATERIAL .
  aliases GC_MBEWACTNG
    for YZ_INTF_MDG_MM_CONST~GC_MBEWACTNG .
  aliases GC_MBEWCSTNG
    for YZ_INTF_MDG_MM_CONST~GC_MBEWCSTNG .
  aliases GC_MBEWMLAC
    for YZ_INTF_MDG_MM_CONST~GC_MBEWMLAC .
  aliases GC_MBEWMLVAL
    for YZ_INTF_MDG_MM_CONST~GC_MBEWMLVAL .
  aliases GC_MBEWVALUA
    for YZ_INTF_MDG_MM_CONST~GC_MBEWVALUA .
  aliases GC_MDMABASIC
    for YZ_INTF_MDG_MM_CONST~GC_MDMABASIC .
  aliases GC_MEAN_GTIN
    for YZ_INTF_MDG_MM_CONST~GC_MEAN_GTIN .
  aliases GC_MLANPURCH
    for YZ_INTF_MDG_MM_CONST~GC_MLANPURCH .
  aliases GC_MLANSALES
    for YZ_INTF_MDG_MM_CONST~GC_MLANSALES .
  aliases GC_MLGNSTOR
    for YZ_INTF_MDG_MM_CONST~GC_MLGNSTOR .
  aliases GC_MLGTSTOR
    for YZ_INTF_MDG_MM_CONST~GC_MLGTSTOR .
  aliases GC_MMTXT
    for YZ_INTF_MDG_MM_CONST~GC_MMTXT .
  aliases GC_MODEL_MM
    for IF_MDG_BS_MAT_GEN_C~GC_MODEL_MM .
  aliases GC_MPGDPRODG
    for YZ_INTF_MDG_MM_CONST~GC_MPGDPRODG .
  aliases GC_MRPTXT
    for YZ_INTF_MDG_MM_CONST~GC_MRPTXT .
  aliases GC_MSGID_PDF
    for IF_MDG_BS_MAT_GEN_C~GC_MSGID_PDF .
  aliases GC_MSGTY_ERROR
    for IF_MDG_BS_MAT_GEN_C~GC_MSGTY_ERROR .
  aliases GC_MVKEGRPNG
    for YZ_INTF_MDG_MM_CONST~GC_MVKEGRPNG .
  aliases GC_MVKESALES
    for YZ_INTF_MDG_MM_CONST~GC_MVKESALES .
  aliases GC_OBJKEY_FIELD_MATNR
    for IF_MDG_BS_MAT_GEN_C~GC_OBJKEY_FIELD_MATNR .
  aliases GC_OBJKEY_FIELD_MTART
    for IF_MDG_BS_MAT_GEN_C~GC_OBJKEY_FIELD_MTART .
  aliases GC_OBJTYPE_MAKT
    for IF_MDG_BS_MAT_GEN_C~GC_OBJTYPE_MAKT .
  aliases GC_OBJTYPE_MARA
    for IF_MDG_BS_MAT_GEN_C~GC_OBJTYPE_MARA .
  aliases GC_PURCHTXT
    for YZ_INTF_MDG_MM_CONST~GC_PURCHTXT .
  aliases GC_QINSPTXT
    for YZ_INTF_MDG_MM_CONST~GC_QINSPTXT .
  aliases GC_QMATBASIC
    for YZ_INTF_MDG_MM_CONST~GC_QMATBASIC .
  aliases GC_SALESTXT
    for YZ_INTF_MDG_MM_CONST~GC_SALESTXT .
  aliases GC_SEVERITY_ABORT
    for IF_MDG_BS_MAT_GEN_C~GC_SEVERITY_ABORT .
  aliases GC_SEVERITY_ERROR
    for IF_MDG_BS_MAT_GEN_C~GC_SEVERITY_ERROR .
  aliases GC_SEVERITY_INFO
    for IF_MDG_BS_MAT_GEN_C~GC_SEVERITY_INFO .
  aliases GC_SEVERITY_WARNING
    for IF_MDG_BS_MAT_GEN_C~GC_SEVERITY_WARNING .
  aliases GC_TDID_BSCDATTXT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_BSCDATTXT .
  aliases GC_TDID_INTCMNT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_INTCMNT .
  aliases GC_TDID_MRPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_MRPTXT .
  aliases GC_TDID_PURCHTXT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_PURCHTXT .
  aliases GC_TDID_QINSPTXT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_QINSPTXT .
  aliases GC_TDID_SALESTXT
    for IF_MDG_BS_MAT_GEN_C~GC_TDID_SALESTXT .
  aliases GC_UIMODE_CHANGE
    for IF_MDG_BS_MAT_GEN_C~GC_UIMODE_CHANGE .
  aliases GC_UIMODE_DISPLAY
    for IF_MDG_BS_MAT_GEN_C~GC_UIMODE_DISPLAY .
  aliases GC_UNITOFMSR
    for YZ_INTF_MDG_MM_CONST~GC_UNITOFMSR .
  aliases GC_USMD_ACTION_LOAD
    for IF_MDG_BS_MAT_GEN_C~GC_USMD_ACTION_LOAD .
  aliases GC_VALUATION
    for YZ_INTF_MDG_MM_CONST~GC_VALUATION .
  aliases GET_ENTITY_DATA
    for YZ_INTF_MDG_DATA_PROCESS~GET_ENTITY_DATA .
  aliases SET_ENTITY_DATA
    for YZ_INTF_MDG_DATA_PROCESS~SET_ENTITY_DATA .
  aliases GS_MMTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GS_MMTXT .
  aliases GTY_S_MM_MESSAGE
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_S_MM_MESSAGE .
  aliases GTY_S_MM_WHERE
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_S_MM_WHERE .
  aliases GTY_T_BSCDATTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_BSCDATTXT .
  aliases GTY_T_CLASSASGN
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_CLASSASGN .
  aliases GTY_T_DRADTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_DRADTXT .
  aliases GTY_T_INTCMNT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_INTCMNT .
  aliases GTY_T_MARAPURCH
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARAPURCH .
  aliases GTY_T_MARAQTMNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARAQTMNG .
  aliases GTY_T_MARASALES
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARASALES .
  aliases GTY_T_MARASPM
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARASPM .
  aliases GTY_T_MARASTOR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARASTOR .
  aliases GTY_T_MARCATP
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCATP .
  aliases GTY_T_MARCBASIC
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCBASIC .
  aliases GTY_T_MARCCSTNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCCSTNG .
  aliases GTY_T_MARCFRCST
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCFRCST .
  aliases GTY_T_MARCFRGTR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCFRGTR .
  aliases GTY_T_MARCFRPAR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCFRPAR .
  aliases GTY_T_MARCMRPFC
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCMRPFC .
  aliases GTY_T_MARCMRPLS
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCMRPLS .
  aliases GTY_T_MARCMRPMI
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCMRPMI .
  aliases GTY_T_MARCMRPPP
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCMRPPP .
  aliases GTY_T_MARCMRPSP
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCMRPSP .
  aliases GTY_T_MARCPRT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCPRT .
  aliases GTY_T_MARCPURCH
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCPURCH .
  aliases GTY_T_MARCQTMNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCQTMNG .
  aliases GTY_T_MARCSALES
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCSALES .
  aliases GTY_T_MARCSTORE
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCSTORE .
  aliases GTY_T_MARCWRKSD
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARCWRKSD .
  aliases GTY_T_MARDMRP
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARDMRP .
  aliases GTY_T_MARDSTOR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MARDSTOR .
  aliases GTY_T_MATERIAL
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MATERIAL .
  aliases GTY_T_MBEWACTNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MBEWACTNG .
  aliases GTY_T_MBEWCSTNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MBEWCSTNG .
  aliases GTY_T_MBEWMLAC
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MBEWMLAC .
  aliases GTY_T_MBEWMLVAL
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MBEWMLVAL .
  aliases GTY_T_MBEWVALUA
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MBEWVALUA .
  aliases GTY_T_MDMABASIC
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MDMABASIC .
  aliases GTY_T_MEAN_GTIN
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MEAN_GTIN .
  aliases GTY_T_MLANPURCH
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MLANPURCH .
  aliases GTY_T_MLANSALES
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MLANSALES .
  aliases GTY_T_MLGNSTOR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MLGNSTOR .
  aliases GTY_T_MLGTSTOR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MLGTSTOR .
  aliases GTY_T_MMTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MMTXT .
  aliases GTY_T_MM_MESSAGE
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MM_MESSAGE .
  aliases GTY_T_MM_WHERE
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MM_WHERE .
  aliases GTY_T_MPGDPRODG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MPGDPRODG .
  aliases GTY_T_MRPTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MRPTXT .
  aliases GTY_T_MVKEGRPNG
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MVKEGRPNG .
  aliases GTY_T_MVKESALES
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_MVKESALES .
  aliases GTY_T_PURCHTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_PURCHTXT .
  aliases GTY_T_QINSPTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_QINSPTXT .
  aliases GTY_T_QMATBASIC
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_QMATBASIC .
  aliases GTY_T_SALESTXT
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_SALESTXT .
  aliases GTY_T_UNITOFMSR
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_UNITOFMSR .
  aliases GTY_T_VALUATION
    for YZ_INTF_MDG_MM_DATA_TYPES~GTY_T_VALUATION .

  class-data MY_MM_DATA type ref to YZ_CLAS_MDG_MM_DATA_PROCESS .
  class-data GT_MMTXT type GTY_T_MMTXT .
  class-data GT_MATERIAL type GTY_T_MATERIAL .
  class-data GT_BSCDATTXT type GTY_T_BSCDATTXT .
  class-data GT_CLASSASGN type GTY_T_CLASSASGN .
  class-data GT_DRADTXT type GTY_T_DRADTXT .
  class-data GT_INTCMNT type GTY_T_INTCMNT .
  class-data GT_MARAPURCH type GTY_T_MARAPURCH .
  class-data GT_MARAQTMNG type GTY_T_MARAQTMNG .
  class-data GT_MARASALES type GTY_T_MARASALES .
  class-data GT_MARASPM type GTY_T_MARASPM .
  class-data GT_MARASTOR type GTY_T_MARASTOR .
  class-data GT_MARCATP type GTY_T_MARCATP .
  class-data GT_MARCBASIC type GTY_T_MARCBASIC .
  class-data GT_MARCCSTNG type GTY_T_MARCCSTNG .
  class-data GT_MARCFRCST type GTY_T_MARCFRCST .
  class-data GT_MARCFRGTR type GTY_T_MARCFRGTR .
  class-data GT_MARCFRPAR type GTY_T_MARCFRPAR .
  class-data GT_MARCMRPFC type GTY_T_MARCMRPFC .
  class-data GT_MARCMRPLS type GTY_T_MARCMRPLS .
  class-data GT_MARCMRPMI type GTY_T_MARCMRPMI .
  class-data GT_MARCMRPPP type GTY_T_MARCMRPPP .
  class-data GT_MARCMRPSP type GTY_T_MARCMRPSP .
  class-data GT_MARCPRT type GTY_T_MARCPRT .
  class-data GT_MARCPURCH type GTY_T_MARCPURCH .
  class-data GT_MARCQTMNG type GTY_T_MARCQTMNG .
  class-data GT_MARCSALES type GTY_T_MARCSALES .
  class-data GT_MARCSTORE type GTY_T_MARCSTORE .
  class-data GT_MARCWRKSD type GTY_T_MARCWRKSD .
  class-data GT_MARDMRP type GTY_T_MARDMRP .
  class-data GT_MARDSTOR type GTY_T_MARDSTOR .
  class-data GT_MBEWACTNG type GTY_T_MBEWACTNG .
  class-data GT_MBEWCSTNG type GTY_T_MBEWCSTNG .
  class-data GT_MBEWMLAC type GTY_T_MBEWMLAC .
  class-data GT_MBEWMLVAL type GTY_T_MBEWMLVAL .
  class-data GT_MBEWVALUA type GTY_T_MBEWVALUA .
  class-data GT_MDMABASIC type GTY_T_MDMABASIC .
  class-data GT_MEAN_GTIN type GTY_T_MEAN_GTIN .
  class-data GT_MLANPURCH type GTY_T_MLANPURCH .
  class-data GT_MLANSALES type GTY_T_MLANSALES .
  class-data GT_MLGNSTOR type GTY_T_MLGNSTOR .
  class-data GT_MLGTSTOR type GTY_T_MLGTSTOR .
  class-data GT_MPGDPRODG type GTY_T_MPGDPRODG .
  class-data GT_MRPTXT type GTY_T_MRPTXT .
  class-data GT_MVKEGRPNG type GTY_T_MVKEGRPNG .
  class-data GT_MVKESALES type GTY_T_MVKESALES .
  class-data GT_PURCHTXT type GTY_T_PURCHTXT .
  class-data GT_QINSPTXT type GTY_T_QINSPTXT .
  class-data GT_QMATBASIC type GTY_T_QMATBASIC .
  class-data GT_SALESTXT type GTY_T_SALESTXT .
  class-data GT_UNITOFMSR type GTY_T_UNITOFMSR .
  class-data GT_VALUATION type GTY_T_VALUATION .

  methods CONSTRUCTOR .
  class-methods GET_MATERIAL
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MATERIAL) type GTY_T_MATERIAL .
  class-methods SET_MATERIAL
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MATERIAL
    importing
      !IT_DATA type ANY TABLE .
  class-methods GET_BSCDATTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_BSCDATTXT) type GTY_T_BSCDATTXT .
  class-methods SET_BSCDATTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_BSCDATTXT
    importing
      !IT_DATA type GTY_T_BSCDATTXT .
  class-methods GET_CLASSASGN
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_CLASSASGN) type GTY_T_CLASSASGN .
  class-methods SET_CLASSASGN
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_CLASSASGN
    importing
      !IT_DATA type GTY_T_CLASSASGN .
  class-methods GET_DRADTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_DRADTXT) type GTY_T_DRADTXT .
  class-methods SET_DRADTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_DRADTXT
    importing
      !IT_DATA type GTY_T_DRADTXT .
  class-methods GET_INTCMNT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_INTCMNT) type GTY_T_INTCMNT .
  class-methods SET_INTCMNT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_INTCMNT
    importing
      !IT_DATA type GTY_T_INTCMNT .
  class-methods GET_MARAPURCH
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARAPURCH) type GTY_T_MARAPURCH .
  class-methods SET_MARAPURCH
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARAPURCH
    importing
      !IT_DATA type GTY_T_MARAPURCH .
  class-methods GET_MARAQTMNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARAQTMNG) type GTY_T_MARAQTMNG .
  class-methods SET_MARAQTMNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARAQTMNG
    importing
      !IT_DATA type GTY_T_MARAQTMNG .
  class-methods GET_MARASALES
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARASALES) type GTY_T_MARASALES .
  class-methods SET_MARASALES
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARASALES
    importing
      !IT_DATA type GTY_T_MARASALES .
  class-methods GET_MARASPM
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARASPM) type GTY_T_MARASPM .
  class-methods SET_MARASPM
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARASPM
    importing
      !IT_DATA type GTY_T_MARASPM .
  class-methods GET_MARASTOR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARASTOR) type GTY_T_MARASTOR .
  class-methods SET_MARASTOR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARASTOR
    importing
      !IT_DATA type GTY_T_MARASTOR .
  class-methods GET_MARCATP
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCATP) type GTY_T_MARCATP .
  class-methods SET_MARCATP
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCATP
    importing
      !IT_DATA type GTY_T_MARCATP .
  class-methods GET_MARCBASIC
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCBASIC) type GTY_T_MARCBASIC .
  class-methods SET_MARCBASIC
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCBASIC
    importing
      !IT_DATA type GTY_T_MARCBASIC .
  class-methods GET_MARCCSTNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCCSTNG) type GTY_T_MARCCSTNG .
  class-methods SET_MARCCSTNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCCSTNG
    importing
      !IT_DATA type GTY_T_MARCCSTNG .
  class-methods GET_MARCFRCST
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCFRCST) type GTY_T_MARCFRCST .
  class-methods SET_MARCFRCST
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCFRCST
    importing
      !IT_DATA type GTY_T_MARCFRCST .
  class-methods GET_MARCFRGTR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCFRGTR) type GTY_T_MARCFRGTR .
  class-methods SET_MARCFRGTR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCFRGTR
    importing
      !IT_DATA type GTY_T_MARCFRGTR .
  class-methods GET_MARCFRPAR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCFRPAR) type GTY_T_MARCFRPAR .
  class-methods SET_MARCFRPAR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCFRPAR
    importing
      !IT_DATA type GTY_T_MARCFRPAR .
  class-methods GET_MARCMRPFC
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCMRPFC) type GTY_T_MARCMRPFC .
  class-methods SET_MARCMRPFC
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCMRPFC
    importing
      !IT_DATA type GTY_T_MARCMRPFC .
  class-methods GET_MARCMRPLS
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCMRPLS) type GTY_T_MARCMRPLS .
  class-methods SET_MARCMRPLS
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCMRPLS
    importing
      !IT_DATA type GTY_T_MARCMRPLS .
  class-methods GET_MARCMRPMI
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCMRPMI) type GTY_T_MARCMRPMI .
  class-methods SET_MARCMRPMI
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCMRPMI
    importing
      !IT_DATA type GTY_T_MARCMRPMI .
  class-methods GET_MARCMRPPP
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCMRPPP) type GTY_T_MARCMRPPP .
  class-methods SET_MARCMRPPP
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCMRPPP
    importing
      !IT_DATA type GTY_T_MARCMRPPP .
  class-methods GET_MARCMRPSP
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCMRPSP) type GTY_T_MARCMRPSP .
  class-methods SET_MARCMRPSP
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCMRPSP
    importing
      !IT_DATA type GTY_T_MARCMRPSP .
  class-methods GET_MARCPRT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCPRT) type GTY_T_MARCPRT .
  class-methods SET_MARCPRT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCPRT
    importing
      !IT_DATA type GTY_T_MARCPRT .
  class-methods GET_MARCPURCH
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCPURCH) type GTY_T_MARCPURCH .
  class-methods SET_MARCPURCH
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCPURCH
    importing
      !IT_DATA type GTY_T_MARCPURCH .
  class-methods GET_MARCQTMNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCQTMNG) type GTY_T_MARCQTMNG .
  class-methods SET_MARCQTMNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCQTMNG
    importing
      !IT_DATA type GTY_T_MARCQTMNG .
  class-methods GET_MARCSALES
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCSALES) type GTY_T_MARCSALES .
  class-methods SET_MARCSALES
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCSALES
    importing
      !IT_DATA type GTY_T_MARCSALES .
  class-methods GET_MARCSTORE
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCSTORE) type GTY_T_MARCSTORE .
  class-methods SET_MARCSTORE
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCSTORE
    importing
      !IT_DATA type GTY_T_MARCSTORE .
  class-methods GET_MARCWRKSD
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARCWRKSD) type GTY_T_MARCWRKSD .
  class-methods SET_MARCWRKSD
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARCWRKSD
    importing
      !IT_DATA type GTY_T_MARCWRKSD .
  class-methods GET_MARDMRP
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARDMRP) type GTY_T_MARDMRP .
  class-methods SET_MARDMRP
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARDMRP
    importing
      !IT_DATA type GTY_T_MARDMRP .
  class-methods GET_MARDSTOR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MARDSTOR) type GTY_T_MARDSTOR .
  class-methods SET_MARDSTOR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MARDSTOR
    importing
      !IT_DATA type GTY_T_MARDSTOR .
  class-methods GET_MBEWACTNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MBEWACTNG) type GTY_T_MBEWACTNG .
  class-methods SET_MBEWACTNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MBEWACTNG
    importing
      !IT_DATA type GTY_T_MBEWACTNG .
  class-methods GET_MBEWCSTNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MBEWCSTNG) type GTY_T_MBEWCSTNG .
  class-methods SET_MBEWCSTNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MBEWCSTNG
    importing
      !IT_DATA type GTY_T_MBEWCSTNG .
  class-methods GET_MBEWMLAC
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MBEWMLAC) type GTY_T_MBEWMLAC .
  class-methods SET_MBEWMLAC
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MBEWMLAC
    importing
      !IT_DATA type GTY_T_MBEWMLAC .
  class-methods GET_MBEWMLVAL
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MBEWMLVAL) type GTY_T_MBEWMLVAL .
  class-methods SET_MBEWMLVAL
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MBEWMLVAL
    importing
      !IT_DATA type GTY_T_MBEWMLVAL .
  class-methods GET_MBEWVALUA
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MBEWVALUA) type GTY_T_MBEWVALUA .
  class-methods SET_MBEWVALUA
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MBEWVALUA
    importing
      !IT_DATA type GTY_T_MBEWVALUA .
  class-methods GET_MDMABASIC
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MDMABASIC) type GTY_T_MDMABASIC .
  class-methods SET_MDMABASIC
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MDMABASIC
    importing
      !IT_DATA type GTY_T_MDMABASIC .
  class-methods GET_MEAN_GTIN
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MEAN_GTIN) type GTY_T_MEAN_GTIN .
  class-methods SET_MEAN_GTIN
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MEAN_GTIN
    importing
      !IT_DATA type GTY_T_MEAN_GTIN .
  class-methods GET_MLANPURCH
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MLANPURCH) type GTY_T_MLANPURCH .
  class-methods SET_MLANPURCH
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MLANPURCH
    importing
      !IT_DATA type GTY_T_MLANPURCH .
  class-methods GET_MLANSALES
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MLANSALES) type GTY_T_MLANSALES .
  class-methods SET_MLANSALES
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MLANSALES
    importing
      !IT_DATA type GTY_T_MLANSALES .
  class-methods GET_MLGNSTOR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MLGNSTOR) type GTY_T_MLGNSTOR .
  class-methods SET_MLGNSTOR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MLGNSTOR
    importing
      !IT_DATA type GTY_T_MLGNSTOR .
  class-methods GET_MLGTSTOR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MLGTSTOR) type GTY_T_MLGTSTOR .
  class-methods SET_MLGTSTOR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MLGTSTOR
    importing
      !IT_DATA type GTY_T_MLGTSTOR .
  class-methods GET_MPGDPRODG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MPGDPRODG) type GTY_T_MPGDPRODG .
  class-methods SET_MPGDPRODG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MPGDPRODG
    importing
      !IT_DATA type GTY_T_MPGDPRODG .
  class-methods GET_MRPTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MRPTXT) type GTY_T_MRPTXT .
  class-methods SET_MRPTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MRPTXT
    importing
      !IT_DATA type GTY_T_MRPTXT .
  class-methods GET_MVKEGRPNG
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MVKEGRPNG) type GTY_T_MVKEGRPNG .
  class-methods SET_MVKEGRPNG
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MVKEGRPNG
    importing
      !IT_DATA type GTY_T_MVKEGRPNG .
  class-methods GET_MVKESALES
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MVKESALES) type GTY_T_MVKESALES .
  class-methods SET_MVKESALES
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_MVKESALES
    importing
      !IT_DATA type GTY_T_MVKESALES .
  class-methods GET_PURCHTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_PURCHTXT) type GTY_T_PURCHTXT .
  class-methods SET_PURCHTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_PURCHTXT
    importing
      !IT_DATA type GTY_T_PURCHTXT .
  class-methods GET_QINSPTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_QINSPTXT) type GTY_T_QINSPTXT .
  class-methods SET_QINSPTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_QINSPTXT
    importing
      !IT_DATA type GTY_T_QINSPTXT .
  class-methods GET_QMATBASIC
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_QMATBASIC) type GTY_T_QMATBASIC .
  class-methods SET_QMATBASIC
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_QMATBASIC
    importing
      !IT_DATA type GTY_T_QMATBASIC .
  class-methods GET_SALESTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_SALESTXT) type GTY_T_SALESTXT .
  class-methods SET_SALESTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_SALESTXT
    importing
      !IT_DATA type GTY_T_SALESTXT .
  class-methods GET_UNITOFMSR
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_UNITOFMSR) type GTY_T_UNITOFMSR .
  class-methods SET_UNITOFMSR
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_UNITOFMSR
    importing
      !IT_DATA type GTY_T_UNITOFMSR .
  class-methods GET_VALUATION
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_VALUATION) type GTY_T_VALUATION .
  class-methods SET_VALUATION
    importing
      !IT_DATA type ANY TABLE .
  class-methods DEL_VALUATION
    importing
      value(IT_DATA) type GTY_T_VALUATION .
  class-methods SET_MMTXT
    importing
      !IT_DATA type ANY TABLE .
  class-methods GET_MMTXT
    importing
      !IV_CREQUEST type USMD_CREQUEST optional
      !IT_KEY_VALUE type GTY_T_KEY_VALUE optional
      !IV_READMODE type USMD_READMODE_EXT default GC_READMODE_ACT_INACT
    exporting
      !ER_DATA type ref to DATA
    returning
      value(RT_MMTXT) type GTY_T_MMTXT .
  class-methods DEL_MMTXT
    importing
      !IT_DATA type GTY_T_MMTXT .
  class-methods GET_DATA_PROCESS
    returning
      value(RO_DATA_PROCESS) type ref to YZ_INTF_MDG_DATA_PROCESS .
  methods SET_MDC2STAGE
    importing
      !IT_DATA type ANY TABLE .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS YZ_CLAS_MDG_MM_DATA_PROCESS IMPLEMENTATION.


  METHOD del_bscdattxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_bscdattxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_classasgn.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_classasgn FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_dradtxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_dradtxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_intcmnt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_intcmnt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marapurch.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marapurch FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_maraqtmng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_maraqtmng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marasales.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marasales FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_maraspm.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_maraspm FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marastor.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marastor FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcatp.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcatp FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcbasic.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcbasic FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marccstng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marccstng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcfrcst.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcfrcst FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcfrgtr.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcfrgtr FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcfrpar.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcfrpar FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcmrpfc.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcmrpfc FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcmrpls.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcmrpls FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcmrpmi.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcmrpmi FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcmrppp.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcmrppp FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcmrpsp.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcmrpsp FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcprt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcprt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcpurch.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcpurch FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcqtmng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcqtmng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcsales.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcsales FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcstore.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcstore FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_marcwrksd.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_marcwrksd FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mardmrp.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mardmrp FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mardstor.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mardstor FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_material.

    FIELD-SYMBOLS: <ls_material> TYPE /mdgmm/_s_mm_pp_material.
    DATA lt_material TYPE gty_t_material.

    MOVE-CORRESPONDING it_data TO lt_material.
    LOOP AT lt_material ASSIGNING <ls_material>.
      DELETE TABLE gt_material FROM <ls_material>.

*      CALL METHOD delete_dependent_entities
*        EXPORTING
*          iv_entity = gc_material
*          is_record = <ls_material>.

    ENDLOOP.
  ENDMETHOD.


  METHOD get_bscdattxt.

    IF gt_bscdattxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_bscdattxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_bscdattxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_bscdattxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_bscdattxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_bscdattxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_bscdattxt = gt_bscdattxt.
    ENDIF.

    IF rt_bscdattxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_bscdattxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_bscdattxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_classasgn.

    IF gt_classasgn IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_classasgn " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_classasgn = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_classasgn                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_classasgn ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_classasgn."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_classasgn = gt_classasgn.
    ENDIF.

    IF rt_classasgn IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_classasgn.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_classasgn ).
    ENDIF.
  ENDMETHOD.


  METHOD get_dradtxt.

    IF gt_dradtxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_dradtxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_dradtxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_dradtxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_dradtxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_dradtxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_dradtxt = gt_dradtxt.
    ENDIF.

    IF rt_dradtxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_dradtxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_dradtxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_intcmnt.

    IF gt_intcmnt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_intcmnt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_intcmnt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_intcmnt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_intcmnt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_intcmnt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_intcmnt = gt_intcmnt.
    ENDIF.

    IF rt_intcmnt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_intcmnt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_intcmnt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marapurch.

    IF gt_marapurch IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marapurch " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marapurch = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marapurch                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marapurch ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marapurch."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marapurch = gt_marapurch.
    ENDIF.

    IF rt_marapurch IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marapurch.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marapurch ).
    ENDIF.
  ENDMETHOD.


  METHOD get_maraqtmng.

    IF gt_maraqtmng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_maraqtmng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_maraqtmng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_maraqtmng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_maraqtmng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_maraqtmng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_maraqtmng = gt_maraqtmng.
    ENDIF.

    IF rt_maraqtmng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_maraqtmng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_maraqtmng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marasales.

    IF gt_marasales IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marapurch " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marasales = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marapurch                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marasales ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marasales."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marasales = gt_marasales.
    ENDIF.

    IF rt_marasales IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marasales.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marasales ).
    ENDIF.
  ENDMETHOD.


  METHOD get_maraspm.

    IF gt_maraspm IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_maraspm " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_maraspm = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_maraspm                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_maraspm ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_maraspm."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_maraspm = gt_maraspm.
    ENDIF.

    IF rt_maraspm IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_maraspm.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_maraspm ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marastor.

    IF gt_marastor IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_marastor " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marastor = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_marastor                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marastor ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marastor."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marastor = gt_marastor.
    ENDIF.

    IF rt_marastor IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marastor.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marastor ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcatp.

    IF gt_marcatp IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcatp " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcatp = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcatp                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcatp ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcatp."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcatp = gt_marcatp.
    ENDIF.

    IF rt_marcatp IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcatp.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcatp ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcbasic.

    IF gt_marcbasic IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcbasic " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcbasic = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcbasic                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcbasic ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcbasic."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcbasic = gt_marcbasic.
    ENDIF.

    IF rt_marcbasic IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcbasic.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcbasic ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marccstng.

    IF gt_marccstng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marccstng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marccstng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marccstng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marccstng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marccstng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marccstng = gt_marccstng.
    ENDIF.

    IF rt_marccstng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marccstng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marccstng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcfrcst.

    IF gt_marcfrcst IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcfrcst " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcfrcst = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcfrcst                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcfrcst ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcfrcst."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcfrcst = gt_marcfrcst.
    ENDIF.

    IF rt_marcfrcst IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcfrcst.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcfrcst ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcfrgtr.

    IF gt_marcfrgtr IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcfrgtr " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcfrgtr = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcfrgtr                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcfrgtr ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcfrgtr."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcfrgtr = gt_marcfrgtr.
    ENDIF.

    IF rt_marcfrgtr IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcfrgtr.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcfrgtr ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcfrpar.

    IF gt_marcfrpar IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcfrpar " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcfrpar = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcfrpar                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcfrpar ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcfrpar."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcfrpar = gt_marcfrpar.
    ENDIF.

    IF rt_marcfrpar IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcfrpar.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcfrpar ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcmrpfc.

    IF gt_marcmrpfc IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcmrpfc " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcmrpfc = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcmrpfc                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcmrpfc ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcmrpfc."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcmrpfc = gt_marcmrpfc.
    ENDIF.

    IF rt_marcmrpfc IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcmrpfc.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcmrpfc ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcmrpls.

    IF gt_marcmrpls IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcmrpls " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcmrpls = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcmrpls                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcmrpls ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcmrpls."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcmrpls = gt_marcmrpls.
    ENDIF.

    IF rt_marcmrpls IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcmrpls.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcmrpls ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcmrpmi.

    IF gt_marcmrpmi IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcmrpmi " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcmrpmi = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcmrpmi                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcmrpmi ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcmrpmi."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcmrpmi = gt_marcmrpmi.
    ENDIF.

    IF rt_marcmrpmi IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcmrpmi.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcmrpmi ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcmrppp.

    IF gt_marcmrppp IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcmrppp " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcmrppp = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcmrppp                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcmrppp ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcmrppp."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcmrppp = gt_marcmrppp.
    ENDIF.

    IF rt_marcmrppp IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcmrppp.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcmrppp ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcmrpsp.

    IF gt_marcmrpsp IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcmrpsp " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcmrpsp = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcmrpsp                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcmrpsp ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcmrpsp."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcmrpsp = gt_marcmrpsp.
    ENDIF.

    IF rt_marcmrpsp IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcmrpsp.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcmrpsp ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcprt.

    IF gt_marcprt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcprt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcprt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcprt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcprt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcprt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcprt = gt_marcprt.
    ENDIF.

    IF rt_marcprt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcprt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcprt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcpurch.

    IF gt_marcpurch IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_marcpurch " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcpurch = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_marcpurch                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcpurch ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcpurch."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcpurch = gt_marcpurch.
    ENDIF.

    IF rt_marcpurch IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcpurch.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcpurch ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcqtmng.

    IF gt_marcqtmng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcqtmng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcqtmng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcqtmng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcqtmng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcqtmng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcqtmng = gt_marcqtmng.
    ENDIF.

    IF rt_marcqtmng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcqtmng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcqtmng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcsales.

    IF gt_marcsales IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcsales " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcsales = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcsales                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcsales ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcsales."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcsales = gt_marcsales.
    ENDIF.

    IF rt_marcsales IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcsales.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcsales ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcstore.

    IF gt_marcstore IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_marcstore " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcstore = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_marcstore                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcstore ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcstore."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcstore = gt_marcstore.
    ENDIF.

    IF rt_marcstore IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcstore.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcstore ).
    ENDIF.
  ENDMETHOD.


  METHOD get_marcwrksd.

    IF gt_marcwrksd IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_marcwrksd " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_marcwrksd = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_marcwrksd                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_marcwrksd ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_marcwrksd."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_marcwrksd = gt_marcwrksd.
    ENDIF.

    IF rt_marcwrksd IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_marcwrksd.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_marcwrksd ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mardmrp.

    IF gt_mardmrp IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mardmrp " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mardmrp = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mardmrp                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mardmrp ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mardmrp."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mardmrp = gt_mardmrp.
    ENDIF.

    IF rt_mardmrp IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mardmrp.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mardmrp ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mardstor.

    IF gt_mardstor IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mardstor " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mardstor = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mardstor                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mardstor ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mardstor."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mardstor = gt_mardstor.
    ENDIF.

    IF rt_mardstor IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mardstor.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mardstor ).
    ENDIF.
  ENDMETHOD.


  METHOD get_material.

    IF gt_material IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_material " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_material = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_material                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_material ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_material."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_material = gt_material.
    ENDIF.

    IF rt_material IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_material.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_material ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mbewactng.

    IF gt_mbewactng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mbewactng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mbewactng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mbewactng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mbewactng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mbewactng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mbewactng = gt_mbewactng.
    ENDIF.

    IF rt_mbewactng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mbewactng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mbewactng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mbewcstng.

    IF gt_mbewcstng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mbewcstng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mbewcstng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mbewcstng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mbewcstng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mbewcstng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mbewcstng = gt_mbewcstng.
    ENDIF.

    IF rt_mbewcstng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mbewcstng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mbewcstng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mbewmlac.

    IF gt_mbewmlac IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mbewmlac " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mbewmlac = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mbewmlac                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mbewmlac ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mbewmlac."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mbewmlac = gt_mbewmlac.
    ENDIF.

    IF rt_mbewmlac IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mbewmlac.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mbewmlac ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mbewmlval.

    IF gt_mbewmlval IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mbewmlval " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mbewmlval = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mbewmlval                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mbewmlval ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mbewmlval."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mbewmlval = gt_mbewmlval.
    ENDIF.

    IF rt_mbewmlval IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mbewmlval.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mbewmlval ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mbewvalua.

    IF gt_mbewvalua IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mbewvalua " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mbewvalua = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mbewvalua                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mbewvalua ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mbewvalua."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mbewvalua = gt_mbewvalua.
    ENDIF.

    IF rt_mbewvalua IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mbewvalua.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mbewvalua ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mdmabasic.

    IF gt_mdmabasic IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mdmabasic " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mdmabasic = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mdmabasic                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mdmabasic ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mdmabasic."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mdmabasic = gt_mdmabasic.
    ENDIF.

    IF rt_mdmabasic IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mdmabasic.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mdmabasic ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mean_gtin.

    IF gt_mean_gtin IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mean_gtin " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mean_gtin = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mean_gtin                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mean_gtin ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mean_gtin."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mean_gtin = gt_mean_gtin.
    ENDIF.

    IF rt_mean_gtin IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mean_gtin.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mean_gtin ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mlanpurch.

    IF gt_mlanpurch IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mlanpurch " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mlanpurch = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mlanpurch                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mlanpurch ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mlanpurch."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mlanpurch = gt_mlanpurch.
    ENDIF.

    IF rt_mlanpurch IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mlanpurch.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mlanpurch ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mlansales.

    IF gt_mlansales IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mlansales " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mlansales = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mlansales                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mlansales ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mlansales."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mlansales = gt_mlansales.
    ENDIF.

    IF rt_mlansales IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mlansales.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mlansales ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mlgnstor.

    IF gt_mlgnstor IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mlgnstor " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mlgnstor = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mlgnstor                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mlgnstor ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mlgnstor."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mlgnstor = gt_mlgnstor.
    ENDIF.

    IF rt_mlgnstor IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mlgnstor.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mlgnstor ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mlgtstor.

    IF gt_mlgtstor IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mlgtstor " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mlgtstor = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mlgtstor                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mlgtstor ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mlgtstor."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mlgtstor = gt_mlgtstor.
    ENDIF.

    IF rt_mlgtstor IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mlgtstor.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mlgtstor ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mmtxt.

    IF gt_mmtxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_mmtxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mmtxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_mmtxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mmtxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mmtxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mmtxt = gt_mmtxt.
    ENDIF.

    IF rt_mmtxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mmtxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mmtxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mpgdprodg.

    IF gt_mpgdprodg IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mpgdprodg " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mpgdprodg = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mpgdprodg                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mpgdprodg ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mpgdprodg."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mpgdprodg = gt_mpgdprodg.
    ENDIF.

    IF rt_mpgdprodg IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mpgdprodg.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mpgdprodg ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mrptxt.

    IF gt_mrptxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mrptxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mrptxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mrptxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mrptxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mrptxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mrptxt = gt_mrptxt.
    ENDIF.

    IF rt_mrptxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mrptxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mrptxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mvkegrpng.

    IF gt_mvkegrpng IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mvkegrpng " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mvkegrpng = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mvkegrpng                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mvkegrpng ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mvkegrpng."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mvkegrpng = gt_mvkegrpng.
    ENDIF.

    IF rt_mvkegrpng IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mvkegrpng.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mvkegrpng ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mvkesales.

    IF gt_mvkesales IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_mvkesales " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_mvkesales = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_mvkesales                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_mvkesales ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_mvkesales."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_mvkesales = gt_mvkesales.
    ENDIF.

    IF rt_mvkesales IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_mvkesales.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_mvkesales ).
    ENDIF.
  ENDMETHOD.


  METHOD get_purchtxt.

    IF gt_purchtxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_purchtxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_purchtxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_purchtxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_purchtxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_purchtxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_purchtxt = gt_purchtxt.
    ENDIF.

    IF rt_purchtxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_purchtxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_purchtxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_qinsptxt.

    IF gt_qinsptxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_qinsptxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_qinsptxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_qinsptxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_qinsptxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_qinsptxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_qinsptxt = gt_qinsptxt.
    ENDIF.

    IF rt_qinsptxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_qinsptxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_qinsptxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_qmatbasic.

    IF gt_qmatbasic IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_qmatbasic " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_qmatbasic = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_qmatbasic                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_qmatbasic ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_qmatbasic."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_qmatbasic = gt_qmatbasic.
    ENDIF.

    IF rt_qmatbasic IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_qmatbasic.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_qmatbasic ).
    ENDIF.
  ENDMETHOD.


  METHOD get_salestxt.

    IF gt_salestxt IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_salestxt " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_salestxt = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_salestxt                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_salestxt ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_salestxt."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_salestxt = gt_salestxt.
    ENDIF.

    IF rt_salestxt IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_salestxt.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_salestxt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_unitofmsr.

    IF gt_unitofmsr IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_unitofmsr " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).
      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_unitofmsr = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity    = gc_entity_unitofmsr                                                           it_key_value = it_key_value ) ).
      LOOP AT gt_unitofmsr ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_unitofmsr."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_unitofmsr = gt_unitofmsr.
    ENDIF.

    IF rt_unitofmsr IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_unitofmsr.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_unitofmsr ).
    ENDIF.
  ENDMETHOD.


  METHOD get_valuation.

    IF gt_valuation IS INITIAL.
*#Fallback API
      CALL METHOD read_entity(
        EXPORTING
          iv_crequest = COND #( WHEN iv_crequest IS INITIAL THEN get_cr_number( ) ELSE iv_crequest )  " Change Request
          iv_entity   = gc_entity_valuation " Entity Type
          iv_readmode = iv_readmode        " Read Mode
        IMPORTING
          eo_data_tab = er_data ).

      IF er_data IS BOUND.
        ASSIGN er_data->* TO FIELD-SYMBOL(<ft_data>).
        IF sy-subrc IS INITIAL AND <ft_data> IS ASSIGNED AND <ft_data> IS NOT INITIAL.
          gt_valuation = <ft_data>.
          CLEAR <ft_data>.
        ENDIF.
      ENDIF.
    ENDIF.

    IF it_key_value IS NOT INITIAL.
      DATA(lv_where) = get_where_condition( filter_current_context( iv_entity = gc_entity_valuation it_key_value = it_key_value ) ).
      LOOP AT gt_valuation ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE (lv_where).
        CHECK sy-subrc IS INITIAL AND <ls_data>  IS ASSIGNED AND <ls_data> IS NOT INITIAL.
        INSERT <ls_data> INTO TABLE rt_valuation."<ft_data>.
      ENDLOOP.
    ELSE.
      rt_valuation = gt_valuation.
    ENDIF.

    IF rt_valuation IS NOT INITIAL.
      CREATE DATA er_data LIKE rt_valuation.
      CHECK er_data IS BOUND.
      ASSIGN er_data->* TO FIELD-SYMBOL(<fgty_t_data>).
      CHECK sy-subrc IS INITIAL AND <fgty_t_data> IS ASSIGNED.
      <fgty_t_data> = CORRESPONDING #( rt_valuation ).
    ENDIF.
  ENDMETHOD.


  METHOD set_bscdattxt.

    DATA lt_bscdattxt TYPE gty_t_bscdattxt.

    MOVE-CORRESPONDING it_data TO lt_bscdattxt.

    FIELD-SYMBOLS: <ls_bscdattxt> TYPE /mdgmm/_s_mm_pp_bscdattxt.

    LOOP AT lt_bscdattxt ASSIGNING <ls_bscdattxt>.
      READ TABLE gt_bscdattxt FROM <ls_bscdattxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_bscdattxt FROM <ls_bscdattxt>.
      ELSE.
        INSERT <ls_bscdattxt> INTO TABLE gt_bscdattxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_bscdattxt
            is_record = <ls_bscdattxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_classasgn.
    DATA lt_classasgn TYPE gty_t_classasgn.

    MOVE-CORRESPONDING it_data TO lt_classasgn.

    FIELD-SYMBOLS: <ls_classasgn> TYPE /mdgmm/_s_mm_pp_classasgn.

    LOOP AT lt_classasgn ASSIGNING <ls_classasgn>.
      READ TABLE gt_classasgn FROM <ls_classasgn> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_classasgn FROM <ls_classasgn>.
      ELSE.
        INSERT <ls_classasgn> INTO TABLE gt_classasgn.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_classasgn
            is_record = <ls_classasgn>.

      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD set_dradtxt.
    DATA lt_dradtxt TYPE gty_t_dradtxt.

    MOVE-CORRESPONDING it_data TO lt_dradtxt.

    FIELD-SYMBOLS: <ls_dradtxt> TYPE /mdgmm/_s_mm_pp_dradtxt.

    LOOP AT lt_dradtxt ASSIGNING <ls_dradtxt>.
      READ TABLE gt_dradtxt FROM <ls_dradtxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_dradtxt FROM <ls_dradtxt>.
      ELSE.
        INSERT <ls_dradtxt> INTO TABLE gt_dradtxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_dradtxt
            is_record = <ls_dradtxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_intcmnt.
    DATA lt_intcmnt TYPE gty_t_intcmnt.

    MOVE-CORRESPONDING it_data TO lt_intcmnt.

    FIELD-SYMBOLS: <ls_intcmnt> TYPE /mdgmm/_s_mm_pp_intcmnt.

    LOOP AT it_data ASSIGNING <ls_intcmnt>.
      READ TABLE gt_intcmnt FROM <ls_intcmnt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_intcmnt FROM <ls_intcmnt>.
      ELSE.
        INSERT <ls_intcmnt> INTO TABLE gt_intcmnt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_intcmnt
            is_record = <ls_intcmnt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marapurch.

    DATA lt_marapurch TYPE gty_t_marapurch.

    MOVE-CORRESPONDING it_data TO lt_marapurch.
    FIELD-SYMBOLS: <ls_marapurch> TYPE /mdgmm/_s_mm_pp_marapurch.

    LOOP AT lt_marapurch ASSIGNING <ls_marapurch>.
      READ TABLE gt_marapurch FROM <ls_marapurch> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marapurch FROM <ls_marapurch>.
      ELSE.
        INSERT <ls_marapurch> INTO TABLE gt_marapurch.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_marapurch
            is_record = <ls_marapurch>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_maraqtmng.
    DATA lt_maraqtmng TYPE gty_t_maraqtmng.

    MOVE-CORRESPONDING it_data TO lt_maraqtmng.
    FIELD-SYMBOLS: <ls_maraqtmng> TYPE /mdgmm/_s_mm_pp_maraqtmng.

    LOOP AT lt_maraqtmng ASSIGNING <ls_maraqtmng>.
      READ TABLE gt_maraqtmng FROM <ls_maraqtmng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_maraqtmng FROM <ls_maraqtmng>.
      ELSE.
        INSERT <ls_maraqtmng> INTO TABLE gt_maraqtmng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_maraqtmng
            is_record = <ls_maraqtmng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marasales.
    DATA lt_marasales TYPE gty_t_marasales.

    MOVE-CORRESPONDING it_data TO lt_marasales.
    FIELD-SYMBOLS: <ls_marasales> TYPE /mdgmm/_s_mm_pp_marasales.

    LOOP AT lt_marasales ASSIGNING <ls_marasales>.
      READ TABLE gt_marasales FROM <ls_marasales> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marasales FROM <ls_marasales>.
      ELSE.
        INSERT <ls_marasales> INTO TABLE gt_marasales.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marasales
            is_record = <ls_marasales>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_maraspm.
    DATA lt_maraspm TYPE gty_t_maraspm.

    MOVE-CORRESPONDING it_data TO lt_maraspm.
    FIELD-SYMBOLS: <ls_maraspm> TYPE /mdgmm/_s_mm_pp_maraspm.

    LOOP AT lt_maraspm ASSIGNING <ls_maraspm>.
      READ TABLE gt_maraspm FROM <ls_maraspm> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_maraspm FROM <ls_maraspm>.
      ELSE.
        INSERT <ls_maraspm> INTO TABLE gt_maraspm.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_maraspm
            is_record = <ls_maraspm>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marastor.
    DATA lt_marastor TYPE gty_t_marastor.

    MOVE-CORRESPONDING it_data TO lt_marastor.
    FIELD-SYMBOLS: <ls_marastor> TYPE /mdgmm/_s_mm_pp_marastor.

    LOOP AT lt_marastor ASSIGNING <ls_marastor>.
      READ TABLE gt_marastor FROM <ls_marastor> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marastor FROM <ls_marastor>.
      ELSE.
        INSERT <ls_marastor> INTO TABLE gt_marastor.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marastor
            is_record = <ls_marastor>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcatp.

    FIELD-SYMBOLS: <ls_marcatp> TYPE /mdgmm/_s_mm_pp_marcatp.
    DATA lt_marcatp TYPE gty_t_marcatp.

    MOVE-CORRESPONDING it_data TO lt_marcatp.
    LOOP AT lt_marcatp ASSIGNING <ls_marcatp>.
      READ TABLE gt_marcatp FROM <ls_marcatp> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcatp FROM <ls_marcatp>.
      ELSE.
        INSERT <ls_marcatp> INTO TABLE gt_marcatp.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcatp
            is_record = <ls_marcatp>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcbasic.

    FIELD-SYMBOLS: <ls_marcbasic> TYPE /mdgmm/_s_mm_pp_marcbasic.
    DATA lt_marcbasic TYPE gty_t_marcbasic.

    MOVE-CORRESPONDING it_data TO lt_marcbasic.
    LOOP AT lt_marcbasic ASSIGNING <ls_marcbasic>.
      READ TABLE gt_marcbasic FROM <ls_marcbasic> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcbasic FROM <ls_marcbasic>.
      ELSE.
        INSERT <ls_marcbasic> INTO TABLE gt_marcbasic.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_marcbasic
            is_record = <ls_marcbasic>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marccstng.

    FIELD-SYMBOLS: <ls_marccstng> TYPE /mdgmm/_s_mm_pp_marccstng.
    DATA lt_marccstng TYPE gty_t_marccstng.

    MOVE-CORRESPONDING it_data TO lt_marccstng.
    LOOP AT lt_marccstng ASSIGNING <ls_marccstng>.
      READ TABLE gt_marccstng FROM <ls_marccstng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marccstng FROM <ls_marccstng>.
      ELSE.
        INSERT <ls_marccstng> INTO TABLE gt_marccstng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marccstng
            is_record = <ls_marccstng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcfrcst.

    FIELD-SYMBOLS: <ls_marcfrcst> TYPE /mdgmm/_s_mm_pp_marcfrcst.
    DATA lt_marcfrcst TYPE gty_t_marcfrcst.

    MOVE-CORRESPONDING it_data TO lt_marcfrcst.
    LOOP AT lt_marcfrcst ASSIGNING <ls_marcfrcst>.
      READ TABLE gt_marcfrcst FROM <ls_marcfrcst> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcfrcst FROM <ls_marcfrcst>.
      ELSE.
        INSERT <ls_marcfrcst> INTO TABLE gt_marcfrcst.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcfrcst
            is_record = <ls_marcfrcst>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcfrgtr.
    FIELD-SYMBOLS: <ls_marcfrgtr> TYPE /mdgmm/_s_mm_pp_marcfrgtr.
    DATA lt_marcfrgtr TYPE gty_t_marcfrgtr.

    MOVE-CORRESPONDING it_data TO lt_marcfrgtr.
    LOOP AT lt_marcfrgtr ASSIGNING <ls_marcfrgtr>.
      READ TABLE gt_marcfrgtr FROM <ls_marcfrgtr> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcfrgtr FROM <ls_marcfrgtr>.
      ELSE.
        INSERT <ls_marcfrgtr> INTO TABLE gt_marcfrgtr.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcfrgtr
            is_record = <ls_marcfrgtr>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcfrpar.
    FIELD-SYMBOLS: <ls_marcfrpar> TYPE /mdgmm/_s_mm_pp_marcfrpar.
    DATA lt_marcfrpar TYPE gty_t_marcfrpar.

    MOVE-CORRESPONDING it_data TO lt_marcfrpar.
    LOOP AT lt_marcfrpar ASSIGNING <ls_marcfrpar>.
      READ TABLE gt_marcfrpar FROM <ls_marcfrpar> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcfrpar FROM <ls_marcfrpar>.
      ELSE.
        INSERT <ls_marcfrpar> INTO TABLE gt_marcfrpar.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcfrpar
            is_record = <ls_marcfrpar>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcmrpfc.

    FIELD-SYMBOLS: <ls_marcmrpfc> TYPE /mdgmm/_s_mm_pp_marcmrpfc.
    DATA lt_marcmrpfc TYPE gty_t_marcmrpfc.

    MOVE-CORRESPONDING it_data TO lt_marcmrpfc.
    LOOP AT lt_marcmrpfc ASSIGNING <ls_marcmrpfc>.
      READ TABLE gt_marcmrpfc FROM <ls_marcmrpfc> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcmrpfc FROM <ls_marcmrpfc>.
      ELSE.
        INSERT <ls_marcmrpfc> INTO TABLE gt_marcmrpfc.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcmrpfc
            is_record = <ls_marcmrpfc>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcmrpls.

    FIELD-SYMBOLS: <ls_marcmrpls> TYPE /mdgmm/_s_mm_pp_marcmrpls.
    DATA lt_marcmrpls TYPE gty_t_marcmrpls.

    MOVE-CORRESPONDING it_data TO lt_marcmrpls.
    LOOP AT lt_marcmrpls ASSIGNING <ls_marcmrpls>.
      READ TABLE gt_marcmrpls FROM <ls_marcmrpls> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcmrpls FROM <ls_marcmrpls>.
      ELSE.
        INSERT <ls_marcmrpls> INTO TABLE gt_marcmrpls.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcmrpls
            is_record = <ls_marcmrpls>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcmrpmi.
    FIELD-SYMBOLS: <ls_marcmrpmi> TYPE /mdgmm/_s_mm_pp_marcmrpmi.
    DATA lt_marcmrpmi TYPE gty_t_marcmrpmi.

    MOVE-CORRESPONDING it_data TO lt_marcmrpmi.
    LOOP AT lt_marcmrpmi ASSIGNING <ls_marcmrpmi>.
      READ TABLE gt_marcmrpmi FROM <ls_marcmrpmi> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcmrpmi FROM <ls_marcmrpmi>.
      ELSE.
        INSERT <ls_marcmrpmi> INTO TABLE gt_marcmrpmi.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcmrpmi
            is_record = <ls_marcmrpmi>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcmrppp.

    FIELD-SYMBOLS: <ls_marcmrppp> TYPE /mdgmm/_s_mm_pp_marcmrppp.
    DATA lt_marcmrppp TYPE gty_t_marcmrppp.

    MOVE-CORRESPONDING it_data TO lt_marcmrppp.
    LOOP AT lt_marcmrppp ASSIGNING <ls_marcmrppp>.
      READ TABLE gt_marcmrppp FROM <ls_marcmrppp> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcmrppp FROM <ls_marcmrppp>.
      ELSE.
        INSERT <ls_marcmrppp> INTO TABLE gt_marcmrppp.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcmrppp
            is_record = <ls_marcmrppp>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcmrpsp.
    FIELD-SYMBOLS: <ls_marcmrpsp> TYPE /mdgmm/_s_mm_pp_marcmrpsp.
    DATA lt_marcmrpsp TYPE gty_t_marcmrpsp.

    MOVE-CORRESPONDING it_data TO lt_marcmrpsp.
*    LOOP AT it_data ASSIGNING <ls_marcmrpsp>.   " Commented by Ram
    LOOP AT lt_marcmrpsp ASSIGNING <ls_marcmrpsp>.  "Added by Ram
      READ TABLE gt_marcmrpsp FROM <ls_marcmrpsp> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcmrpsp FROM <ls_marcmrpsp>.
      ELSE.
        INSERT <ls_marcmrpsp> INTO TABLE gt_marcmrpsp.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcmrpsp
            is_record = <ls_marcmrpsp>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcprt.

    FIELD-SYMBOLS: <ls_marcprt> TYPE /mdgmm/_s_mm_pp_marcprt.
    DATA lt_marcprt TYPE gty_t_marcprt.

    MOVE-CORRESPONDING it_data TO lt_marcprt.
    LOOP AT lt_marcprt ASSIGNING <ls_marcprt>.
      READ TABLE gt_marcprt FROM <ls_marcprt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcprt FROM <ls_marcprt>.
      ELSE.
        INSERT <ls_marcprt> INTO TABLE gt_marcprt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcprt
            is_record = <ls_marcprt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcpurch.

    FIELD-SYMBOLS: <ls_marcpurch> TYPE /mdgmm/_s_mm_pp_marcpurch.
    DATA lt_marcpurch TYPE gty_t_marcpurch.

    MOVE-CORRESPONDING it_data TO lt_marcpurch.
    LOOP AT lt_marcpurch ASSIGNING <ls_marcpurch>.
      READ TABLE gt_marcpurch FROM <ls_marcpurch> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcpurch FROM <ls_marcpurch>.
      ELSE.
        INSERT <ls_marcpurch> INTO TABLE gt_marcpurch.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcpurch
            is_record = <ls_marcpurch>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcqtmng.
    FIELD-SYMBOLS: <ls_marcqtmng> TYPE /mdgmm/_s_mm_pp_marcqtmng.
    DATA lt_marcqtmng TYPE gty_t_marcqtmng.

    MOVE-CORRESPONDING it_data TO lt_marcqtmng.
    LOOP AT lt_marcqtmng ASSIGNING <ls_marcqtmng>.
      READ TABLE gt_marcqtmng FROM <ls_marcqtmng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcqtmng FROM <ls_marcqtmng>.
      ELSE.
        INSERT <ls_marcqtmng> INTO TABLE gt_marcqtmng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcqtmng
            is_record = <ls_marcqtmng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcsales.

    FIELD-SYMBOLS: <ls_marcsales> TYPE /mdgmm/_s_mm_pp_marcsales.
    DATA lt_marcsales TYPE gty_t_marcsales.

    MOVE-CORRESPONDING it_data TO lt_marcsales.
    LOOP AT lt_marcsales ASSIGNING <ls_marcsales>.
      READ TABLE gt_marcsales FROM <ls_marcsales> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcsales FROM <ls_marcsales>.
      ELSE.
        INSERT <ls_marcsales> INTO TABLE gt_marcsales.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcsales
            is_record = <ls_marcsales>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcstore.
    FIELD-SYMBOLS: <ls_marcstore> TYPE /mdgmm/_s_mm_pp_marcstore.
    DATA lt_marcstore TYPE gty_t_marcstore.

    MOVE-CORRESPONDING it_data TO lt_marcstore.
    LOOP AT lt_marcstore ASSIGNING <ls_marcstore>.
      READ TABLE gt_marcstore FROM <ls_marcstore> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcstore FROM <ls_marcstore>.
      ELSE.
        INSERT <ls_marcstore> INTO TABLE gt_marcstore.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcstore
            is_record = <ls_marcstore>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_marcwrksd.

    FIELD-SYMBOLS: <ls_marcwrksd> TYPE /mdgmm/_s_mm_pp_marcwrksd.
    DATA lt_marcwrksd TYPE gty_t_marcwrksd.

    MOVE-CORRESPONDING it_data TO lt_marcwrksd.
    LOOP AT lt_marcwrksd ASSIGNING <ls_marcwrksd>.
      READ TABLE gt_marcwrksd FROM <ls_marcwrksd> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_marcwrksd FROM <ls_marcwrksd>.
      ELSE.
        INSERT <ls_marcwrksd> INTO TABLE gt_marcwrksd.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_marcwrksd
            is_record = <ls_marcwrksd>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mardmrp.
    FIELD-SYMBOLS: <ls_mardmrp> TYPE /mdgmm/_s_mm_pp_mardmrp.
    DATA lt_mardmrp TYPE gty_t_mardmrp.

    MOVE-CORRESPONDING it_data TO lt_mardmrp.
    LOOP AT lt_mardmrp ASSIGNING <ls_mardmrp>.
      READ TABLE gt_mardmrp FROM <ls_mardmrp> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mardmrp FROM <ls_mardmrp>.
      ELSE.
        INSERT <ls_mardmrp> INTO TABLE gt_mardmrp.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_mardmrp
            is_record = <ls_mardmrp>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mardstor.

    FIELD-SYMBOLS: <ls_mardstor> TYPE /mdgmm/_s_mm_pp_mardstor.
    DATA lt_mardstor TYPE gty_t_mardstor.

    MOVE-CORRESPONDING it_data TO lt_mardstor.
    LOOP AT lt_mardstor ASSIGNING <ls_mardstor>.
      READ TABLE gt_mardstor FROM <ls_mardstor> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mardstor FROM <ls_mardstor>.
      ELSE.
        INSERT <ls_mardstor> INTO TABLE gt_mardstor.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_mardstor
            is_record = <ls_mardstor>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_material.

    FIELD-SYMBOLS: <ls_material> TYPE /mdgmm/_s_mm_pp_material.
    DATA lt_material TYPE gty_t_material.

    MOVE-CORRESPONDING it_data TO lt_material.
    LOOP AT lt_material ASSIGNING <ls_material>.
      READ TABLE gt_material FROM <ls_material> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_material FROM <ls_material>.
      ELSE.
        INSERT <ls_material> INTO TABLE gt_material.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_material
            is_record = <ls_material>.

      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD set_mbewactng.

    FIELD-SYMBOLS: <ls_mbewactng> TYPE /mdgmm/_s_mm_pp_mbewactng.
    DATA lt_mbewactng TYPE gty_t_mbewactng.

    MOVE-CORRESPONDING it_data TO lt_mbewactng.
    LOOP AT lt_mbewactng ASSIGNING <ls_mbewactng>.
      READ TABLE gt_mbewactng FROM <ls_mbewactng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mbewactng FROM <ls_mbewactng>.
      ELSE.
        INSERT <ls_mbewactng> INTO TABLE gt_mbewactng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_mbewactng
            is_record = <ls_mbewactng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mbewcstng.
    FIELD-SYMBOLS: <ls_mbewcstng> TYPE /mdgmm/_s_mm_pp_mbewcstng.
    DATA lt_mbewcstng TYPE gty_t_mbewcstng.

    MOVE-CORRESPONDING it_data TO lt_mbewcstng.
    LOOP AT lt_mbewcstng ASSIGNING <ls_mbewcstng>.
      READ TABLE gt_mbewcstng FROM <ls_mbewcstng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mbewcstng FROM <ls_mbewcstng>.
      ELSE.
        INSERT <ls_mbewcstng> INTO TABLE gt_mbewcstng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mbewcstng
            is_record = <ls_mbewcstng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mbewmlac.

    FIELD-SYMBOLS: <ls_mbewmlac> TYPE /mdgmm/_s_mm_pp_mbewmlac.
    DATA lt_mbewmlac TYPE gty_t_mbewmlac.

    MOVE-CORRESPONDING it_data TO lt_mbewmlac.
    LOOP AT lt_mbewmlac ASSIGNING <ls_mbewmlac>.
      READ TABLE gt_mbewmlac FROM <ls_mbewmlac> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mbewmlac FROM <ls_mbewmlac>.
      ELSE.
        INSERT <ls_mbewmlac> INTO TABLE gt_mbewmlac.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mbewmlac
            is_record = <ls_mbewmlac>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mbewmlval.
    FIELD-SYMBOLS: <ls_mbewmlval> TYPE /mdgmm/_s_mm_pp_mbewmlval.
    DATA lt_mbewmlval TYPE gty_t_mbewmlval.

    MOVE-CORRESPONDING it_data TO lt_mbewmlval.
    LOOP AT lt_mbewmlval ASSIGNING <ls_mbewmlval>.
      READ TABLE gt_mbewmlval FROM <ls_mbewmlval> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mbewmlval FROM <ls_mbewmlval>.
      ELSE.
        INSERT <ls_mbewmlval> INTO TABLE gt_mbewmlval.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mbewmlval
            is_record = <ls_mbewmlval>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mbewvalua.

    FIELD-SYMBOLS: <ls_mbewvalua> TYPE /mdgmm/_s_mm_pp_mbewvalua.
    DATA lt_mbewvalua TYPE gty_t_mbewvalua.

    MOVE-CORRESPONDING it_data TO lt_mbewvalua.
    LOOP AT lt_mbewvalua ASSIGNING <ls_mbewvalua>.
      READ TABLE gt_mbewvalua FROM <ls_mbewvalua> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mbewvalua FROM <ls_mbewvalua>.
      ELSE.
        INSERT <ls_mbewvalua> INTO TABLE gt_mbewvalua.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mbewvalua
            is_record = <ls_mbewvalua>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mdmabasic.
    FIELD-SYMBOLS: <ls_mdmabasic> TYPE /mdgmm/_s_mm_pp_mdmabasic.
    DATA lt_mdmabasic TYPE gty_t_mdmabasic.

    MOVE-CORRESPONDING it_data TO lt_mdmabasic.
    LOOP AT lt_mdmabasic ASSIGNING <ls_mdmabasic>.
      READ TABLE gt_mdmabasic FROM <ls_mdmabasic> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mdmabasic FROM <ls_mdmabasic>.
      ELSE.
        INSERT <ls_mdmabasic> INTO TABLE gt_mdmabasic.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mdmabasic
            is_record = <ls_mdmabasic>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mean_gtin.
    FIELD-SYMBOLS: <ls_mean_gtin> TYPE /mdgmm/_s_mm_pp_mean_gtin.
    DATA lt_mean_gtin TYPE gty_t_mean_gtin.

    MOVE-CORRESPONDING it_data TO lt_mean_gtin.
    LOOP AT lt_mean_gtin ASSIGNING <ls_mean_gtin>.
      READ TABLE gt_mean_gtin FROM <ls_mean_gtin> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mean_gtin FROM <ls_mean_gtin>.
      ELSE.
        INSERT <ls_mean_gtin> INTO TABLE gt_mean_gtin.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mean_gtin
            is_record = <ls_mean_gtin>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mlanpurch.
    FIELD-SYMBOLS: <ls_mlanpurch> TYPE /mdgmm/_s_mm_pp_mlanpurch.
    DATA lt_mlanpurch TYPE gty_t_mlanpurch.

    MOVE-CORRESPONDING it_data TO lt_mlanpurch.
    LOOP AT lt_mlanpurch ASSIGNING <ls_mlanpurch>.
      READ TABLE gt_mlanpurch FROM <ls_mlanpurch> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mlanpurch FROM <ls_mlanpurch>.
      ELSE.
        INSERT <ls_mlanpurch> INTO TABLE gt_mlanpurch.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mlanpurch
            is_record = <ls_mlanpurch>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mlansales.
    FIELD-SYMBOLS: <ls_mlansales> TYPE /mdgmm/_s_mm_pp_mlansales.
    DATA lt_mlansales TYPE gty_t_mlansales.

    MOVE-CORRESPONDING it_data TO lt_mlansales.
    LOOP AT lt_mlansales ASSIGNING <ls_mlansales>.
      READ TABLE gt_mlansales FROM <ls_mlansales> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mlansales FROM <ls_mlansales>.
      ELSE.
        INSERT <ls_mlansales> INTO TABLE gt_mlansales.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mlansales
            is_record = <ls_mlansales>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mlgnstor.
    FIELD-SYMBOLS: <ls_mlgnstor> TYPE /mdgmm/_s_mm_pp_mlgnstor.
    DATA lt_mlgnstor TYPE gty_t_mlgnstor.

    MOVE-CORRESPONDING it_data TO lt_mlgnstor.
    LOOP AT lt_mlgnstor ASSIGNING <ls_mlgnstor>.
      READ TABLE gt_mlgnstor FROM <ls_mlgnstor> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mlgnstor FROM <ls_mlgnstor>.
      ELSE.
        INSERT <ls_mlgnstor> INTO TABLE gt_mlgnstor.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mlgnstor
            is_record = <ls_mlgnstor>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mlgtstor.
    FIELD-SYMBOLS: <ls_mlgtstor> TYPE /mdgmm/_s_mm_pp_mlgtstor.
    DATA lt_mlgtstor TYPE gty_t_mlgtstor.

    MOVE-CORRESPONDING it_data TO lt_mlgtstor.
    LOOP AT lt_mlgtstor ASSIGNING <ls_mlgtstor>.
      READ TABLE gt_mlgtstor FROM <ls_mlgtstor> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mlgtstor FROM <ls_mlgtstor>.
      ELSE.
        INSERT <ls_mlgtstor> INTO TABLE gt_mlgtstor.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mlgtstor
            is_record = <ls_mlgtstor>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mmtxt.

    FIELD-SYMBOLS: <ls_mmtxt> TYPE gs_mmtxt.
    DATA lt_mmtxt TYPE gty_t_mmtxt.

    MOVE-CORRESPONDING it_data TO lt_mmtxt.

    LOOP AT lt_mmtxt ASSIGNING <ls_mmtxt>.
      READ TABLE gt_mmtxt FROM <ls_mmtxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mmtxt FROM <ls_mmtxt>.
      ELSE.
        INSERT <ls_mmtxt> INTO TABLE gt_mmtxt.

      ENDIF.
    ENDLOOP.


  ENDMETHOD.


  METHOD set_mpgdprodg.

    FIELD-SYMBOLS: <ls_mpgdprodg> TYPE /mdgmm/_s_mm_pp_mpgdprodg.
    DATA lt_mpgdprodg TYPE gty_t_mpgdprodg.

    MOVE-CORRESPONDING it_data TO lt_mpgdprodg.
    LOOP AT lt_mpgdprodg ASSIGNING <ls_mpgdprodg>.
      READ TABLE gt_mpgdprodg FROM <ls_mpgdprodg> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mpgdprodg FROM <ls_mpgdprodg>.
      ELSE.
        INSERT <ls_mpgdprodg> INTO TABLE gt_mpgdprodg.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mpgdprodg
            is_record = <ls_mpgdprodg>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mrptxt.
    FIELD-SYMBOLS: <ls_mrptxt> TYPE /mdgmm/_s_mm_pp_mrptxt.
    DATA lt_mrptxt TYPE gty_t_mrptxt.

    MOVE-CORRESPONDING it_data TO lt_mrptxt.
    LOOP AT lt_mrptxt ASSIGNING <ls_mrptxt>.
      READ TABLE gt_mrptxt FROM <ls_mrptxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mrptxt FROM <ls_mrptxt>.
      ELSE.
        INSERT <ls_mrptxt> INTO TABLE gt_mrptxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mrptxt
            is_record = <ls_mrptxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mvkegrpng.
    FIELD-SYMBOLS: <ls_mvkegrpng> TYPE /mdgmm/_s_mm_pp_mvkegrpng.
    DATA lt_mvkegrpng TYPE gty_t_mvkegrpng.

    MOVE-CORRESPONDING it_data TO lt_mvkegrpng.
    LOOP AT lt_mvkegrpng ASSIGNING <ls_mvkegrpng>.
      READ TABLE gt_mvkegrpng FROM <ls_mvkegrpng> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mvkegrpng FROM <ls_mvkegrpng>.
      ELSE.
        INSERT <ls_mvkegrpng> INTO TABLE gt_mvkegrpng.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mvkegrpng
            is_record = <ls_mvkegrpng>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_mvkesales.
    FIELD-SYMBOLS: <ls_mvkesales> TYPE /mdgmm/_s_mm_pp_mvkesales.
    DATA lt_mvkesales TYPE gty_t_mvkesales.

    MOVE-CORRESPONDING it_data TO lt_mvkesales.
    LOOP AT lt_mvkesales ASSIGNING <ls_mvkesales>.
      READ TABLE gt_mvkesales FROM <ls_mvkesales> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_mvkesales FROM <ls_mvkesales>.
      ELSE.
        INSERT <ls_mvkesales> INTO TABLE gt_mvkesales.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_mvkesales
            is_record = <ls_mvkesales>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_purchtxt.
    FIELD-SYMBOLS: <ls_purchtxt> TYPE /mdgmm/_s_mm_pp_purchtxt.
    DATA lt_purchtxt TYPE gty_t_purchtxt.

    MOVE-CORRESPONDING it_data TO lt_purchtxt.
    LOOP AT lt_purchtxt ASSIGNING <ls_purchtxt>.
      READ TABLE gt_purchtxt FROM <ls_purchtxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_purchtxt FROM <ls_purchtxt>.
      ELSE.
        INSERT <ls_purchtxt> INTO TABLE gt_purchtxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_purchtxt
            is_record = <ls_purchtxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_qinsptxt.
    FIELD-SYMBOLS: <ls_qinsptxt> TYPE /mdgmm/_s_mm_pp_qinsptxt.
    DATA lt_qinsptxt TYPE gty_t_qinsptxt.

    MOVE-CORRESPONDING it_data TO lt_qinsptxt.
    LOOP AT lt_qinsptxt ASSIGNING <ls_qinsptxt>.
      READ TABLE gt_qinsptxt FROM <ls_qinsptxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_qinsptxt FROM <ls_qinsptxt>.
      ELSE.
        INSERT <ls_qinsptxt> INTO TABLE gt_qinsptxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_qinsptxt
            is_record = <ls_qinsptxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_qmatbasic.
    FIELD-SYMBOLS: <ls_qmatbasic> TYPE /mdgmm/_s_mm_pp_qmatbasic.
    DATA lt_qmatbasic TYPE gty_t_qmatbasic.

    MOVE-CORRESPONDING it_data TO lt_qmatbasic.
    LOOP AT lt_qmatbasic ASSIGNING <ls_qmatbasic>.
      READ TABLE gt_qmatbasic FROM <ls_qmatbasic> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_qmatbasic FROM <ls_qmatbasic>.
      ELSE.
        INSERT <ls_qmatbasic> INTO TABLE gt_qmatbasic.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_qmatbasic
            is_record = <ls_qmatbasic>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_salestxt.
    FIELD-SYMBOLS: <ls_salestxt> TYPE /mdgmm/_s_mm_pp_salestxt.
    DATA lt_salestxt TYPE gty_t_salestxt.

    MOVE-CORRESPONDING it_data TO lt_salestxt.
    LOOP AT lt_salestxt ASSIGNING <ls_salestxt>.
      READ TABLE gt_salestxt FROM <ls_salestxt> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_salestxt FROM <ls_salestxt>.
      ELSE.
        INSERT <ls_salestxt> INTO TABLE gt_salestxt.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_salestxt
            is_record = <ls_salestxt>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_unitofmsr.
    FIELD-SYMBOLS: <ls_unitofmsr> TYPE /mdgmm/_s_mm_pp_unitofmsr.
    DATA lt_unitofmsr TYPE gty_t_unitofmsr.

    MOVE-CORRESPONDING it_data TO lt_unitofmsr.
    LOOP AT lt_unitofmsr ASSIGNING <ls_unitofmsr>.
      READ TABLE gt_unitofmsr FROM <ls_unitofmsr> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_unitofmsr FROM <ls_unitofmsr>.
      ELSE.
        INSERT <ls_unitofmsr> INTO TABLE gt_unitofmsr.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_unitofmsr
            is_record = <ls_unitofmsr>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_valuation.
    FIELD-SYMBOLS: <ls_valuation> TYPE /mdgmm/_s_mm_pp_valuation.
    DATA lt_valuation TYPE gty_t_valuation.

    MOVE-CORRESPONDING it_data TO lt_valuation.
    LOOP AT lt_valuation ASSIGNING <ls_valuation>.
      READ TABLE gt_valuation FROM <ls_valuation> TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MODIFY TABLE gt_valuation FROM <ls_valuation>.
      ELSE.
        INSERT <ls_valuation> INTO TABLE gt_valuation.

        CALL METHOD create_dependent_entities
          EXPORTING
            iv_entity = gc_entity_valuation
            is_record = <ls_valuation>.

      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD del_mbewactng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mbewactng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mbewcstng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mbewcstng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mbewmlac.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mbewmlac FROM is_data.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD del_mbewmlval.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mbewmlval FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mbewvalua.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mbewvalua FROM is_data.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD del_mdmabasic.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mdmabasic FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mean_gtin.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mean_gtin FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mlanpurch.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mlanpurch FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mlansales.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mlansales FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mlgnstor.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mlgnstor FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mlgtstor.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mlgtstor FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mmtxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mmtxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mpgdprodg.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mpgdprodg FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mrptxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mrptxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mvkegrpng.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mvkegrpng FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_mvkesales.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_mvkesales FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_purchtxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_purchtxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_qinsptxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_qinsptxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_qmatbasic.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_qmatbasic FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_salestxt.
    IF it_data IS NOT INITIAL.
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_salestxt FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD del_unitofmsr.
  ENDMETHOD.


  METHOD del_valuation.
    IF it_data IS NOT INITIAL .
      LOOP AT it_data INTO DATA(is_data).
        DELETE TABLE gt_valuation FROM is_data.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD get_data_process.

    IF my_mm_data IS INITIAL.
      CREATE OBJECT my_mm_data.
    ENDIF.

    IF my_mm_data IS BOUND.
      ro_data_process ?= my_mm_data.
    ELSE.
*      Raise Exception
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
    super->constructor( ).
    init_model( iv_model = gc_model_mm ).
    init_entity_keys( iv_model = gc_model_mm ).
    init_dependent_entities( ).
  ENDMETHOD.


  METHOD yz_intf_mdg_data_process~get_entity_data.

    FIELD-SYMBOLS : <ft_data> TYPE ANY TABLE.

    DATA(lv_method_name) = gc_get && iv_entity.

    TRY.

        CALL METHOD (lv_method_name)
          EXPORTING
            iv_crequest  = iv_crequest                                              " Change Request
            iv_readmode  = iv_readmode
            it_key_value = it_key_value                                               " Key Value Table Type
          IMPORTING
            er_data      = er_data.

        ASSIGN er_data->* TO <ft_data>.
        IF <ft_data> IS ASSIGNED.
          et_data = <ft_data>.
        ENDIF.

      CATCH cx_root INTO DATA(lr_error).
        DATA(lv_error) = lr_error->get_text( ).
    ENDTRY.


  ENDMETHOD.


  METHOD yz_intf_mdg_data_process~set_entity_data.

    IF io_changed_data IS BOUND.
      io_changed_data->get_entity_types( IMPORTING et_entity_del = DATA(lt_entity_del)
      et_entity_mod = DATA(lt_entity_mod) ).                " List of Entity Types Containing New And/Or Changed Data

      IF lt_entity_mod IS NOT INITIAL.

        LOOP AT lt_entity_mod INTO DATA(ls_entity_mod) WHERE struct = gc_kattr.

          io_changed_data->read_data( EXPORTING i_entity      = ls_entity_mod-entity  " Entity Type
                                                i_struct      = ls_entity_mod-struct  " Type of Data Structure
                                      IMPORTING er_t_data_mod = DATA(lr_t_data_mod)  )." "Modified" Data Records (INSERT+UPDATE ).


          ASSIGN lr_t_data_mod->* TO FIELD-SYMBOL(<lt_data_mod>).

          IF <lt_data_mod> IS ASSIGNED AND <lt_data_mod> IS NOT INITIAL.

*          IF gs_application_context-br_type EQ gc_execute_derivation.
            append_entity_keys_derivation( iv_entity = ls_entity_mod-entity it_data = <lt_data_mod> ).

            DATA(lv_method_name) = gc_set && ls_entity_mod-entity.

            TRY.
                CALL METHOD (lv_method_name) EXPORTING it_data = <lt_data_mod>.
              CATCH cx_root INTO DATA(lr_error).
                DATA(lv_error) = lr_error->get_text( ).

            ENDTRY.
*          ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF lt_entity_del IS NOT INITIAL.

        LOOP AT lt_entity_del INTO DATA(ls_entity_del) WHERE struct = gc_kattr.

          CALL METHOD io_changed_data->read_data
            EXPORTING
              i_entity               = ls_entity_del-entity
              i_struct               = ls_entity_del-struct
            IMPORTING
              er_t_data_del          = DATA(ir_t_data_del)
              ef_t_data_upd_complete = DATA(ir_t_data_upd_comp).

          ASSIGN ir_t_data_del->* TO FIELD-SYMBOL(<lt_data_del>).
          DATA(iv_method_name) = gc_del && ls_entity_del-entity.

          IF <lt_data_del> IS ASSIGNED AND <lt_data_del> IS NOT INITIAL.
            TRY.
                CALL METHOD (iv_method_name) EXPORTING it_data = <lt_data_del>.
              CATCH cx_root INTO DATA(ir_error).
                DATA(iv_error) = ir_error->get_text( ).

            ENDTRY.
          ENDIF.

        ENDLOOP.
      ENDIF.

    ENDIF.

    IF it_data IS NOT INITIAL.
      lv_method_name = gc_set && iv_entity.

      TRY.
          CALL METHOD (lv_method_name) EXPORTING it_data = it_data.
        CATCH cx_root INTO lr_error.
          lv_error = lr_error->get_text( ).

      ENDTRY.

    ENDIF.
  ENDMETHOD.


  METHOD set_mdc2stage.
    CONSTANTS: lc_prefix TYPE string VALUE 'GT_'.
    DATA: lt_key_val TYPE yztabl_t_key_value.
    FIELD-SYMBOLS: <ls_entity_data> TYPE ANY TABLE.
    MOVE-CORRESPONDING it_data TO lt_key_val.
    DATA(lv_matnr) = lt_key_val[ 1 ]-value.

    CHECK lv_matnr IS NOT INITIAL.
    READ TABLE zcl_mdc_model_mat=>gt_source_entity_map_data WITH KEY data-matnr = lv_matnr INTO DATA(ls_src_2_map_data).
    CHECK sy-subrc IS INITIAL.

    LOOP AT ls_src_2_map_data-it_mat_staging INTO DATA(ls_mat_staging).
      CHECK ls_mat_staging IS NOT INITIAL.
      DATA(lv_method_name)  = |{ 'SET_' }| & |{ ls_mat_staging-entity }| .
      DATA(lv_param_name)   = 'IT_DATA'.
      DATA(lv_tab_name)     = lc_prefix && ls_mat_staging-entity.

      ASSIGN ls_mat_staging-tabl->* TO <ls_entity_data>.
      CHECK sy-subrc IS INITIAL AND <ls_entity_data> IS ASSIGNED.

*      if <ls_entity_data> is initial.
*        call method cl_usmd_read_api=>get_instance
*          EXPORTING
*            io_model       = get_cr_usmd_model_api( 'MM' )
*          RECEIVING
*            ro_read_api    = data(lo_read_api)
*          .
*        lo_read_api->read_active_data(
*          EXPORTING
*            iv_entity_type =  ls_mat_staging-entity                " Entity Type Name
*            it_entity_key  =  value GTY_T_KEY_VALUE( ( key_field = 'MATERIAL' VALUE = lv_matnr ) )               " Entity Key or Data Table
**            iv_crequest_id =                  " Change Request ID
**            iv_edition     =                  " Edition Name
*          IMPORTING
*            et_data        =  <ls_entity_data>                " Requested Data Table
*        ).
*        endif.

*      DATA(lt_ptab) = VALUE abap_parmbind_tab(
*          ( name  = CONV #( condense( lv_param_name ) )
*            kind  = cl_abap_objectdescr=>exporting
*            value = REF #( <ls_entity_data> ) ) ).


      TRY.
          CLEAR: me->(lv_tab_name).
          MOVE-CORRESPONDING <ls_entity_data> TO me->(lv_tab_name).
*          CALL METHOD me->(lv_method_name)
*            PARAMETER-TABLE lt_ptab.                 " Tabletype for DRADBASIC data
        CATCH CX_root INTO DATA(lo_exception).
*          MOVE-CORRESPONDING <ls_entity_data> TO me->(lv_tab_name).
          DATA(lv_text) = lo_exception->get_text( ).
          DATA(lv_text_long) = lo_exception->get_longtext( ).
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.
